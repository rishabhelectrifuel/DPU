
DPU_smbus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004168  08004168  00014168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041e8  080041e8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080041e8  080041e8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041e8  080041e8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041e8  080041e8  000141e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041ec  080041ec  000141ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080041f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000028  08004218  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08004218  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a778  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5b  00000000  00000000  0002a7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a78  00000000  00000000  0002d058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f6a  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d153  00000000  00000000  00047a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096e67  00000000  00000000  00054b8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb9f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000eba44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000028 	.word	0x20000028
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004150 	.word	0x08004150

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000002c 	.word	0x2000002c
 8000104:	08004150 	.word	0x08004150

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <DPU_Average>:
_Bool NextFlag=0;



void DPU_Average(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 	uint32_t AverageBufferVol=0;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
 	AverageBufferVol=DPU_Vol_Count;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <DPU_Average+0x50>)
 8000410:	881b      	ldrh	r3, [r3, #0]
 8000412:	607b      	str	r3, [r7, #4]
	for(int i=0; i<50; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	e00c      	b.n	8000434 <DPU_Average+0x30>
	{
		AverageBufferVol+=ADC_Count_DPU[0];
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <DPU_Average+0x54>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	687a      	ldr	r2, [r7, #4]
 8000420:	18d3      	adds	r3, r2, r3
 8000422:	607b      	str	r3, [r7, #4]
		delay(300);
 8000424:	2396      	movs	r3, #150	; 0x96
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	0018      	movs	r0, r3
 800042a:	f000 f91b 	bl	8000664 <delay>
	for(int i=0; i<50; i++)
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	603b      	str	r3, [r7, #0]
 8000434:	683b      	ldr	r3, [r7, #0]
 8000436:	2b31      	cmp	r3, #49	; 0x31
 8000438:	ddef      	ble.n	800041a <DPU_Average+0x16>
	}
	DPU_Vol_Count=AverageBufferVol/50;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2132      	movs	r1, #50	; 0x32
 800043e:	0018      	movs	r0, r3
 8000440:	f7ff fe6a 	bl	8000118 <__udivsi3>
 8000444:	0003      	movs	r3, r0
 8000446:	b29a      	uxth	r2, r3
 8000448:	4b02      	ldr	r3, [pc, #8]	; (8000454 <DPU_Average+0x50>)
 800044a:	801a      	strh	r2, [r3, #0]
}
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	b002      	add	sp, #8
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000048 	.word	0x20000048
 8000458:	2000004c 	.word	0x2000004c

0800045c <ControlVoltage>:




void ControlVoltage(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	 DPU_Average();
 8000460:	f7ff ffd0 	bl	8000404 <DPU_Average>
	 if(DpuVol < 18000)
 8000464:	4b6e      	ldr	r3, [pc, #440]	; (8000620 <ControlVoltage+0x1c4>)
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	4a6e      	ldr	r2, [pc, #440]	; (8000624 <ControlVoltage+0x1c8>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d80a      	bhi.n	8000484 <ControlVoltage+0x28>
	 {
		  FactorDpu=17920;
 800046e:	4b6e      	ldr	r3, [pc, #440]	; (8000628 <ControlVoltage+0x1cc>)
 8000470:	228c      	movs	r2, #140	; 0x8c
 8000472:	01d2      	lsls	r2, r2, #7
 8000474:	801a      	strh	r2, [r3, #0]
		  duty=2;
 8000476:	4b6d      	ldr	r3, [pc, #436]	; (800062c <ControlVoltage+0x1d0>)
 8000478:	2202      	movs	r2, #2
 800047a:	801a      	strh	r2, [r3, #0]
		  NextFlag=1;
 800047c:	4b6c      	ldr	r3, [pc, #432]	; (8000630 <ControlVoltage+0x1d4>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
 8000482:	e00e      	b.n	80004a2 <ControlVoltage+0x46>

	 }
	 else if(DpuVol > 18000 && NextFlag==1)
 8000484:	4b66      	ldr	r3, [pc, #408]	; (8000620 <ControlVoltage+0x1c4>)
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	4a6a      	ldr	r2, [pc, #424]	; (8000634 <ControlVoltage+0x1d8>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d909      	bls.n	80004a2 <ControlVoltage+0x46>
 800048e:	4b68      	ldr	r3, [pc, #416]	; (8000630 <ControlVoltage+0x1d4>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d005      	beq.n	80004a2 <ControlVoltage+0x46>
	 {
		 NextFlag=0;
 8000496:	4b66      	ldr	r3, [pc, #408]	; (8000630 <ControlVoltage+0x1d4>)
 8000498:	2200      	movs	r2, #0
 800049a:	701a      	strb	r2, [r3, #0]
		 long_delay(100);
 800049c:	2064      	movs	r0, #100	; 0x64
 800049e:	f000 f8f1 	bl	8000684 <long_delay>

	 }
	 DpuVol=(FactorDpu*DPU_Vol_Count)/1000;
 80004a2:	4b61      	ldr	r3, [pc, #388]	; (8000628 <ControlVoltage+0x1cc>)
 80004a4:	881b      	ldrh	r3, [r3, #0]
 80004a6:	001a      	movs	r2, r3
 80004a8:	4b63      	ldr	r3, [pc, #396]	; (8000638 <ControlVoltage+0x1dc>)
 80004aa:	881b      	ldrh	r3, [r3, #0]
 80004ac:	4353      	muls	r3, r2
 80004ae:	22fa      	movs	r2, #250	; 0xfa
 80004b0:	0091      	lsls	r1, r2, #2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f7ff feba 	bl	800022c <__divsi3>
 80004b8:	0003      	movs	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	4b58      	ldr	r3, [pc, #352]	; (8000620 <ControlVoltage+0x1c4>)
 80004be:	801a      	strh	r2, [r3, #0]
	 if(SetVolt < 23000) SetVolt=23000;
 80004c0:	4b5e      	ldr	r3, [pc, #376]	; (800063c <ControlVoltage+0x1e0>)
 80004c2:	881b      	ldrh	r3, [r3, #0]
 80004c4:	4a5e      	ldr	r2, [pc, #376]	; (8000640 <ControlVoltage+0x1e4>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d802      	bhi.n	80004d0 <ControlVoltage+0x74>
 80004ca:	4b5c      	ldr	r3, [pc, #368]	; (800063c <ControlVoltage+0x1e0>)
 80004cc:	4a5d      	ldr	r2, [pc, #372]	; (8000644 <ControlVoltage+0x1e8>)
 80004ce:	801a      	strh	r2, [r3, #0]
	 if(SetVolt > 56000) SetVolt=56000;
 80004d0:	4b5a      	ldr	r3, [pc, #360]	; (800063c <ControlVoltage+0x1e0>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	4a5c      	ldr	r2, [pc, #368]	; (8000648 <ControlVoltage+0x1ec>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d902      	bls.n	80004e0 <ControlVoltage+0x84>
 80004da:	4b58      	ldr	r3, [pc, #352]	; (800063c <ControlVoltage+0x1e0>)
 80004dc:	4a5b      	ldr	r2, [pc, #364]	; (800064c <ControlVoltage+0x1f0>)
 80004de:	801a      	strh	r2, [r3, #0]




	if((SetVolt-200) < DpuVol && DpuVol < SetVolt-200)
 80004e0:	4b56      	ldr	r3, [pc, #344]	; (800063c <ControlVoltage+0x1e0>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	3bc7      	subs	r3, #199	; 0xc7
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <ControlVoltage+0x1c4>)
 80004e8:	8812      	ldrh	r2, [r2, #0]
 80004ea:	4293      	cmp	r3, r2
 80004ec:	dc08      	bgt.n	8000500 <ControlVoltage+0xa4>
 80004ee:	4b4c      	ldr	r3, [pc, #304]	; (8000620 <ControlVoltage+0x1c4>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	001a      	movs	r2, r3
 80004f4:	4b51      	ldr	r3, [pc, #324]	; (800063c <ControlVoltage+0x1e0>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	3bc8      	subs	r3, #200	; 0xc8
 80004fa:	429a      	cmp	r2, r3
 80004fc:	da00      	bge.n	8000500 <ControlVoltage+0xa4>
 80004fe:	e08b      	b.n	8000618 <ControlVoltage+0x1bc>
	{

	}
	else if(SetVolt+200 < DpuVol)
 8000500:	4b4e      	ldr	r3, [pc, #312]	; (800063c <ControlVoltage+0x1e0>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	33c8      	adds	r3, #200	; 0xc8
 8000506:	4a46      	ldr	r2, [pc, #280]	; (8000620 <ControlVoltage+0x1c4>)
 8000508:	8812      	ldrh	r2, [r2, #0]
 800050a:	4293      	cmp	r3, r2
 800050c:	da3d      	bge.n	800058a <ControlVoltage+0x12e>
			 //if(duty==1) break;
//			 if(SetVolt >= (DpuVol-200))
//				 {
//				 break;
//				 }
			 duty=duty-1;
 800050e:	4b47      	ldr	r3, [pc, #284]	; (800062c <ControlVoltage+0x1d0>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	b29a      	uxth	r2, r3
 8000516:	4b45      	ldr	r3, [pc, #276]	; (800062c <ControlVoltage+0x1d0>)
 8000518:	801a      	strh	r2, [r3, #0]
			 if(DpuVol < 26000) FactorDpu=17930;
 800051a:	4b41      	ldr	r3, [pc, #260]	; (8000620 <ControlVoltage+0x1c4>)
 800051c:	881b      	ldrh	r3, [r3, #0]
 800051e:	4a4c      	ldr	r2, [pc, #304]	; (8000650 <ControlVoltage+0x1f4>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d803      	bhi.n	800052c <ControlVoltage+0xd0>
 8000524:	4b40      	ldr	r3, [pc, #256]	; (8000628 <ControlVoltage+0x1cc>)
 8000526:	4a4b      	ldr	r2, [pc, #300]	; (8000654 <ControlVoltage+0x1f8>)
 8000528:	801a      	strh	r2, [r3, #0]
 800052a:	e00e      	b.n	800054a <ControlVoltage+0xee>
 			 else if(DpuVol < 42000) FactorDpu=FactorDpu+14;
 800052c:	4b3c      	ldr	r3, [pc, #240]	; (8000620 <ControlVoltage+0x1c4>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	4a49      	ldr	r2, [pc, #292]	; (8000658 <ControlVoltage+0x1fc>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d806      	bhi.n	8000544 <ControlVoltage+0xe8>
 8000536:	4b3c      	ldr	r3, [pc, #240]	; (8000628 <ControlVoltage+0x1cc>)
 8000538:	881b      	ldrh	r3, [r3, #0]
 800053a:	330e      	adds	r3, #14
 800053c:	b29a      	uxth	r2, r3
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <ControlVoltage+0x1cc>)
 8000540:	801a      	strh	r2, [r3, #0]
 8000542:	e002      	b.n	800054a <ControlVoltage+0xee>
			 else FactorDpu=17216;
 8000544:	4b38      	ldr	r3, [pc, #224]	; (8000628 <ControlVoltage+0x1cc>)
 8000546:	4a45      	ldr	r2, [pc, #276]	; (800065c <ControlVoltage+0x200>)
 8000548:	801a      	strh	r2, [r3, #0]
			 if(duty == 0)
 800054a:	4b38      	ldr	r3, [pc, #224]	; (800062c <ControlVoltage+0x1d0>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d102      	bne.n	8000558 <ControlVoltage+0xfc>
			 {
				 duty=1;
 8000552:	4b36      	ldr	r3, [pc, #216]	; (800062c <ControlVoltage+0x1d0>)
 8000554:	2201      	movs	r2, #1
 8000556:	801a      	strh	r2, [r3, #0]

			 }
			 TIM3->CCR4=duty;
 8000558:	4b34      	ldr	r3, [pc, #208]	; (800062c <ControlVoltage+0x1d0>)
 800055a:	881a      	ldrh	r2, [r3, #0]
 800055c:	4b40      	ldr	r3, [pc, #256]	; (8000660 <ControlVoltage+0x204>)
 800055e:	641a      	str	r2, [r3, #64]	; 0x40
			 DPU_Average();
 8000560:	f7ff ff50 	bl	8000404 <DPU_Average>
			 long_delay(20);
 8000564:	2014      	movs	r0, #20
 8000566:	f000 f88d 	bl	8000684 <long_delay>
			 DpuVol=(FactorDpu*DPU_Vol_Count/1000);
 800056a:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <ControlVoltage+0x1cc>)
 800056c:	881b      	ldrh	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	4b31      	ldr	r3, [pc, #196]	; (8000638 <ControlVoltage+0x1dc>)
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	4353      	muls	r3, r2
 8000576:	22fa      	movs	r2, #250	; 0xfa
 8000578:	0091      	lsls	r1, r2, #2
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff fe56 	bl	800022c <__divsi3>
 8000580:	0003      	movs	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <ControlVoltage+0x1c4>)
 8000586:	801a      	strh	r2, [r3, #0]


		 }
	}

}
 8000588:	e046      	b.n	8000618 <ControlVoltage+0x1bc>
	else if(DpuVol < SetVolt-200)
 800058a:	4b25      	ldr	r3, [pc, #148]	; (8000620 <ControlVoltage+0x1c4>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	001a      	movs	r2, r3
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <ControlVoltage+0x1e0>)
 8000592:	881b      	ldrh	r3, [r3, #0]
 8000594:	3bc8      	subs	r3, #200	; 0xc8
 8000596:	429a      	cmp	r2, r3
 8000598:	da3e      	bge.n	8000618 <ControlVoltage+0x1bc>
			 duty=duty+1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <ControlVoltage+0x1d0>)
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	4b22      	ldr	r3, [pc, #136]	; (800062c <ControlVoltage+0x1d0>)
 80005a4:	801a      	strh	r2, [r3, #0]
			 if(DpuVol < 26000) FactorDpu=17930;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <ControlVoltage+0x1c4>)
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	4a29      	ldr	r2, [pc, #164]	; (8000650 <ControlVoltage+0x1f4>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d802      	bhi.n	80005b6 <ControlVoltage+0x15a>
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <ControlVoltage+0x1cc>)
 80005b2:	4a28      	ldr	r2, [pc, #160]	; (8000654 <ControlVoltage+0x1f8>)
 80005b4:	801a      	strh	r2, [r3, #0]
 			 if(DpuVol < 42000) FactorDpu=FactorDpu-14;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <ControlVoltage+0x1c4>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	4a27      	ldr	r2, [pc, #156]	; (8000658 <ControlVoltage+0x1fc>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d806      	bhi.n	80005ce <ControlVoltage+0x172>
 80005c0:	4b19      	ldr	r3, [pc, #100]	; (8000628 <ControlVoltage+0x1cc>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	3b0e      	subs	r3, #14
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	4b17      	ldr	r3, [pc, #92]	; (8000628 <ControlVoltage+0x1cc>)
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	e002      	b.n	80005d4 <ControlVoltage+0x178>
			 else FactorDpu=17216;
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <ControlVoltage+0x1cc>)
 80005d0:	4a22      	ldr	r2, [pc, #136]	; (800065c <ControlVoltage+0x200>)
 80005d2:	801a      	strh	r2, [r3, #0]
 			 if(duty > 480)
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <ControlVoltage+0x1d0>)
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	23f0      	movs	r3, #240	; 0xf0
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	429a      	cmp	r2, r3
 80005de:	d902      	bls.n	80005e6 <ControlVoltage+0x18a>
				 duty=1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <ControlVoltage+0x1d0>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	801a      	strh	r2, [r3, #0]
			 TIM3->CCR4=duty;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <ControlVoltage+0x1d0>)
 80005e8:	881a      	ldrh	r2, [r3, #0]
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <ControlVoltage+0x204>)
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40
			 DPU_Average();
 80005ee:	f7ff ff09 	bl	8000404 <DPU_Average>
			 long_delay(20);
 80005f2:	2014      	movs	r0, #20
 80005f4:	f000 f846 	bl	8000684 <long_delay>
			 DpuVol=(FactorDpu*DPU_Vol_Count/1000);
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <ControlVoltage+0x1cc>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	001a      	movs	r2, r3
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <ControlVoltage+0x1dc>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	4353      	muls	r3, r2
 8000604:	22fa      	movs	r2, #250	; 0xfa
 8000606:	0091      	lsls	r1, r2, #2
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff fe0f 	bl	800022c <__divsi3>
 800060e:	0003      	movs	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b03      	ldr	r3, [pc, #12]	; (8000620 <ControlVoltage+0x1c4>)
 8000614:	801a      	strh	r2, [r3, #0]
}
 8000616:	e7ff      	b.n	8000618 <ControlVoltage+0x1bc>
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	20000044 	.word	0x20000044
 8000624:	0000464f 	.word	0x0000464f
 8000628:	20000046 	.word	0x20000046
 800062c:	20000002 	.word	0x20000002
 8000630:	2000004a 	.word	0x2000004a
 8000634:	00004650 	.word	0x00004650
 8000638:	20000048 	.word	0x20000048
 800063c:	20000000 	.word	0x20000000
 8000640:	000059d7 	.word	0x000059d7
 8000644:	000059d8 	.word	0x000059d8
 8000648:	0000dac0 	.word	0x0000dac0
 800064c:	ffffdac0 	.word	0xffffdac0
 8000650:	0000658f 	.word	0x0000658f
 8000654:	0000460a 	.word	0x0000460a
 8000658:	0000a40f 	.word	0x0000a40f
 800065c:	00004340 	.word	0x00004340
 8000660:	40000400 	.word	0x40000400

08000664 <delay>:




void delay(unsigned int cycles)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
   while(cycles!=0)
 800066c:	e002      	b.n	8000674 <delay+0x10>
   cycles--;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3b01      	subs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
   while(cycles!=0)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d1f9      	bne.n	800066e <delay+0xa>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}

08000684 <long_delay>:

void long_delay(unsigned int cycle)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]

	while(cycle>0)
 800068c:	e006      	b.n	800069c <long_delay+0x18>
	{
		delay(65500);
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <long_delay+0x28>)
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ffe7 	bl	8000664 <delay>
		cycle--;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	3b01      	subs	r3, #1
 800069a:	607b      	str	r3, [r7, #4]
	while(cycle>0)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1f5      	bne.n	800068e <long_delay+0xa>
	}
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b002      	add	sp, #8
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	0000ffdc 	.word	0x0000ffdc

080006b0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b08b      	sub	sp, #44	; 0x2c
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
 80006bc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80006be:	2110      	movs	r1, #16
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	223c      	movs	r2, #60	; 0x3c
 80006c4:	2008      	movs	r0, #8
 80006c6:	1812      	adds	r2, r2, r0
 80006c8:	19d2      	adds	r2, r2, r7
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	759a      	strb	r2, [r3, #22]

	lcd.en_pin = en_pin;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2238      	movs	r2, #56	; 0x38
 80006d2:	1812      	adds	r2, r2, r0
 80006d4:	19d2      	adds	r2, r2, r7
 80006d6:	8812      	ldrh	r2, [r2, #0]
 80006d8:	829a      	strh	r2, [r3, #20]
	lcd.en_port = en_port;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80006de:	611a      	str	r2, [r3, #16]

	lcd.rs_pin = rs_pin;
 80006e0:	187a      	adds	r2, r7, r1
 80006e2:	2330      	movs	r3, #48	; 0x30
 80006e4:	181b      	adds	r3, r3, r0
 80006e6:	19db      	adds	r3, r3, r7
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	8193      	strh	r3, [r2, #12]
	lcd.rs_port = rs_port;
 80006ec:	000c      	movs	r4, r1
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	609a      	str	r2, [r3, #8]

	lcd.data_pin = pin;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	605a      	str	r2, [r3, #4]
	lcd.data_port = port;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	601a      	str	r2, [r3, #0]

	Lcd_init(&lcd);
 8000700:	193b      	adds	r3, r7, r4
 8000702:	0018      	movs	r0, r3
 8000704:	f000 f80a 	bl	800071c <Lcd_init>

	return lcd;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	193a      	adds	r2, r7, r4
 800070c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800070e:	c313      	stmia	r3!, {r0, r1, r4}
 8000710:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000712:	c313      	stmia	r3!, {r0, r1, r4}
}
 8000714:	68f8      	ldr	r0, [r7, #12]
 8000716:	46bd      	mov	sp, r7
 8000718:	b00b      	add	sp, #44	; 0x2c
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d9b      	ldrb	r3, [r3, #22]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d10f      	bne.n	800074c <Lcd_init+0x30>
	{
			lcd_write_command(lcd, 0x33);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2133      	movs	r1, #51	; 0x33
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f87c 	bl	800082e <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2132      	movs	r1, #50	; 0x32
 800073a:	0018      	movs	r0, r3
 800073c:	f000 f877 	bl	800082e <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2128      	movs	r1, #40	; 0x28
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f872 	bl	800082e <lcd_write_command>
 800074a:	e004      	b.n	8000756 <Lcd_init+0x3a>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2138      	movs	r1, #56	; 0x38
 8000750:	0018      	movs	r0, r3
 8000752:	f000 f86c 	bl	800082e <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2101      	movs	r1, #1
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f867 	bl	800082e <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	210c      	movs	r1, #12
 8000764:	0018      	movs	r0, r3
 8000766:	f000 f862 	bl	800082e <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2106      	movs	r1, #6
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f85d 	bl	800082e <lcd_write_command>
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	b002      	add	sp, #8
 800077a:	bd80      	pop	{r7, pc}

0800077c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000786:	230f      	movs	r3, #15
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e00f      	b.n	80007b0 <Lcd_string+0x34>
	{
		lcd_write_data(lcd, string[i]);
 8000790:	240f      	movs	r4, #15
 8000792:	193b      	adds	r3, r7, r4
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	18d3      	adds	r3, r2, r3
 800079a:	781a      	ldrb	r2, [r3, #0]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 f876 	bl	8000892 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	3201      	adds	r2, #1
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	230f      	movs	r3, #15
 80007b2:	18fb      	adds	r3, r7, r3
 80007b4:	781c      	ldrb	r4, [r3, #0]
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fca5 	bl	8000108 <strlen>
 80007be:	0003      	movs	r3, r0
 80007c0:	429c      	cmp	r4, r3
 80007c2:	d3e5      	bcc.n	8000790 <Lcd_string+0x14>
	}
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b005      	add	sp, #20
 80007cc:	bd90      	pop	{r4, r7, pc}
	...

080007d0 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	0008      	movs	r0, r1
 80007da:	0011      	movs	r1, r2
 80007dc:	1cfb      	adds	r3, r7, #3
 80007de:	1c02      	adds	r2, r0, #0
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	1cbb      	adds	r3, r7, #2
 80007e4:	1c0a      	adds	r2, r1, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80007e8:	1cfb      	adds	r3, r7, #3
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <Lcd_cursor+0x40>)
 80007ee:	5cd2      	ldrb	r2, [r2, r3]
 80007f0:	1cbb      	adds	r3, r7, #2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	3b80      	subs	r3, #128	; 0x80
 80007fa:	b2da      	uxtb	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f814 	bl	800082e <lcd_write_command>
	#endif
}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	080041d4 	.word	0x080041d4

08000814 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2101      	movs	r1, #1
 8000820:	0018      	movs	r0, r3
 8000822:	f000 f804 	bl	800082e <lcd_write_command>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	000a      	movs	r2, r1
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6898      	ldr	r0, [r3, #8]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	899b      	ldrh	r3, [r3, #12]
 8000844:	2200      	movs	r2, #0
 8000846:	0019      	movs	r1, r3
 8000848:	f001 ff2f 	bl	80026aa <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7d9b      	ldrb	r3, [r3, #22]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d113      	bne.n	800087c <lcd_write_command+0x4e>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000854:	1cfb      	adds	r3, r7, #3
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	b2d9      	uxtb	r1, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2204      	movs	r2, #4
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f87c 	bl	800095e <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000866:	1cfb      	adds	r3, r7, #3
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	220f      	movs	r2, #15
 800086c:	4013      	ands	r3, r2
 800086e:	b2d9      	uxtb	r1, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2204      	movs	r2, #4
 8000874:	0018      	movs	r0, r3
 8000876:	f000 f872 	bl	800095e <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 800087a:	e006      	b.n	800088a <lcd_write_command+0x5c>
		lcd_write(lcd, command, LCD_BYTE);
 800087c:	1cfb      	adds	r3, r7, #3
 800087e:	7819      	ldrb	r1, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2208      	movs	r2, #8
 8000884:	0018      	movs	r0, r3
 8000886:	f000 f86a 	bl	800095e <lcd_write>
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}

08000892 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	6078      	str	r0, [r7, #4]
 800089a:	000a      	movs	r2, r1
 800089c:	1cfb      	adds	r3, r7, #3
 800089e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6898      	ldr	r0, [r3, #8]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	899b      	ldrh	r3, [r3, #12]
 80008a8:	2201      	movs	r2, #1
 80008aa:	0019      	movs	r1, r3
 80008ac:	f001 fefd 	bl	80026aa <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7d9b      	ldrb	r3, [r3, #22]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d113      	bne.n	80008e0 <lcd_write_data+0x4e>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80008b8:	1cfb      	adds	r3, r7, #3
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	b2d9      	uxtb	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2204      	movs	r2, #4
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 f84a 	bl	800095e <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80008ca:	1cfb      	adds	r3, r7, #3
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	220f      	movs	r2, #15
 80008d0:	4013      	ands	r3, r2
 80008d2:	b2d9      	uxtb	r1, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2204      	movs	r2, #4
 80008d8:	0018      	movs	r0, r3
 80008da:	f000 f840 	bl	800095e <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 80008de:	e006      	b.n	80008ee <lcd_write_data+0x5c>
		lcd_write(lcd, data, LCD_BYTE);
 80008e0:	1cfb      	adds	r3, r7, #3
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2208      	movs	r2, #8
 80008e8:	0018      	movs	r0, r3
 80008ea:	f000 f838 	bl	800095e <lcd_write>
}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <Delay>:
void Delay(int del)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
	int temp;
	for (uint16_t i=0;i<900;i++)
 80008fe:	230a      	movs	r3, #10
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	2200      	movs	r2, #0
 8000904:	801a      	strh	r2, [r3, #0]
 8000906:	e01e      	b.n	8000946 <Delay+0x50>
	{

		for(uint8_t j=0;j<25;j++)
 8000908:	2309      	movs	r3, #9
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e00e      	b.n	8000930 <Delay+0x3a>
		{
			temp=del;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]
			while(temp>=0)
 8000916:	e002      	b.n	800091e <Delay+0x28>
			{
				temp--;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3b01      	subs	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
			while(temp>=0)
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b00      	cmp	r3, #0
 8000922:	daf9      	bge.n	8000918 <Delay+0x22>
		for(uint8_t j=0;j<25;j++)
 8000924:	2109      	movs	r1, #9
 8000926:	187b      	adds	r3, r7, r1
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	187b      	adds	r3, r7, r1
 800092c:	3201      	adds	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	2309      	movs	r3, #9
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b18      	cmp	r3, #24
 8000938:	d9eb      	bls.n	8000912 <Delay+0x1c>
	for (uint16_t i=0;i<900;i++)
 800093a:	210a      	movs	r1, #10
 800093c:	187b      	adds	r3, r7, r1
 800093e:	881a      	ldrh	r2, [r3, #0]
 8000940:	187b      	adds	r3, r7, r1
 8000942:	3201      	adds	r2, #1
 8000944:	801a      	strh	r2, [r3, #0]
 8000946:	230a      	movs	r3, #10
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	881a      	ldrh	r2, [r3, #0]
 800094c:	23e1      	movs	r3, #225	; 0xe1
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	429a      	cmp	r2, r3
 8000952:	d3d9      	bcc.n	8000908 <Delay+0x12>
			}
		}

	}

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b004      	add	sp, #16
 800095c:	bd80      	pop	{r7, pc}

0800095e <lcd_write>:
/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800095e:	b590      	push	{r4, r7, lr}
 8000960:	b085      	sub	sp, #20
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	0008      	movs	r0, r1
 8000968:	0011      	movs	r1, r2
 800096a:	1cfb      	adds	r3, r7, #3
 800096c:	1c02      	adds	r2, r0, #0
 800096e:	701a      	strb	r2, [r3, #0]
 8000970:	1cbb      	adds	r3, r7, #2
 8000972:	1c0a      	adds	r2, r1, #0
 8000974:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < len; i++)
 8000976:	230f      	movs	r3, #15
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e020      	b.n	80009c2 <lcd_write+0x64>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	240f      	movs	r4, #15
 8000986:	193b      	adds	r3, r7, r4
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	18d3      	adds	r3, r2, r3
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	193b      	adds	r3, r7, r4
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	18d3      	adds	r3, r2, r3
 800099c:	8819      	ldrh	r1, [r3, #0]
 800099e:	1cfb      	adds	r3, r7, #3
 80009a0:	781a      	ldrb	r2, [r3, #0]
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	411a      	asrs	r2, r3
 80009a8:	0013      	movs	r3, r2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2201      	movs	r2, #1
 80009ae:	4013      	ands	r3, r2
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	001a      	movs	r2, r3
 80009b4:	f001 fe79 	bl	80026aa <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	3201      	adds	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	230f      	movs	r3, #15
 80009c4:	18fa      	adds	r2, r7, r3
 80009c6:	1cbb      	adds	r3, r7, #2
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3d7      	bcc.n	8000980 <lcd_write+0x22>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6918      	ldr	r0, [r3, #16]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	8a9b      	ldrh	r3, [r3, #20]
 80009d8:	2201      	movs	r2, #1
 80009da:	0019      	movs	r1, r3
 80009dc:	f001 fe65 	bl	80026aa <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	Delay(1);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff ff88 	bl	80008f6 <Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6918      	ldr	r0, [r3, #16]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	8a9b      	ldrh	r3, [r3, #20]
 80009ee:	2200      	movs	r2, #0
 80009f0:	0019      	movs	r1, r3
 80009f2:	f001 fe5a 	bl	80026aa <HAL_GPIO_WritePin>
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	b005      	add	sp, #20
 80009fc:	bd90      	pop	{r4, r7, pc}
	...

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b5b0      	push	{r4, r5, r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fdf1 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f89f 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f000 fa4d 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f000 fa35 	bl	8000e80 <MX_DMA_Init>
  MX_ADC_Init();
 8000a16:	f000 f8dd 	bl	8000bd4 <MX_ADC_Init>
  MX_TIM3_Init();
 8000a1a:	f000 f9b1 	bl	8000d80 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a1e:	f000 f95b 	bl	8000cd8 <MX_TIM2_Init>

//  uint8_t* pint =;
//  uint8_t* pint2 =;
//  uint8_t pint3=*pint;
//  uint8_t pint4=*pint;
  Vint_Cal=*((uint16_t*)0x1FFFF7BA);
 8000a22:	4b38      	ldr	r3, [pc, #224]	; (8000b04 <main+0x104>)
 8000a24:	881a      	ldrh	r2, [r3, #0]
 8000a26:	4b38      	ldr	r3, [pc, #224]	; (8000b08 <main+0x108>)
 8000a28:	801a      	strh	r2, [r3, #0]


  FactorDpu=17920;
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <main+0x10c>)
 8000a2c:	228c      	movs	r2, #140	; 0x8c
 8000a2e:	01d2      	lsls	r2, r2, #7
 8000a30:	801a      	strh	r2, [r3, #0]
  TIM3->CCR4=duty;
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <main+0x110>)
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	4b37      	ldr	r3, [pc, #220]	; (8000b14 <main+0x114>)
 8000a38:	641a      	str	r2, [r3, #64]	; 0x40


   HAL_ADC_Start_DMA(&hadc,(uint32_t*)ADC_Count_DPU,4);
 8000a3a:	4937      	ldr	r1, [pc, #220]	; (8000b18 <main+0x118>)
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <main+0x11c>)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 ff77 	bl	8001934 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <main+0x120>)
 8000a48:	210c      	movs	r1, #12
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fc24 	bl	8003298 <HAL_TIM_PWM_Start>
 // HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
  lcd = Lcd_create(LCDArrayPort, LCDArrayPins, RS_GPIO_Port, RS_Pin, GPIOB, EN_Pin, LCD_4_BIT_MODE);
 8000a50:	4d34      	ldr	r5, [pc, #208]	; (8000b24 <main+0x124>)
 8000a52:	0038      	movs	r0, r7
 8000a54:	4c34      	ldr	r4, [pc, #208]	; (8000b28 <main+0x128>)
 8000a56:	4a35      	ldr	r2, [pc, #212]	; (8000b2c <main+0x12c>)
 8000a58:	4935      	ldr	r1, [pc, #212]	; (8000b30 <main+0x130>)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	9303      	str	r3, [sp, #12]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	01db      	lsls	r3, r3, #7
 8000a62:	9302      	str	r3, [sp, #8]
 8000a64:	4b33      	ldr	r3, [pc, #204]	; (8000b34 <main+0x134>)
 8000a66:	9301      	str	r3, [sp, #4]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	021b      	lsls	r3, r3, #8
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	0023      	movs	r3, r4
 8000a70:	f7ff fe1e 	bl	80006b0 <Lcd_create>
 8000a74:	003a      	movs	r2, r7
 8000a76:	002b      	movs	r3, r5
 8000a78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a7a:	c313      	stmia	r3!, {r0, r1, r4}
 8000a7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a7e:	c313      	stmia	r3!, {r0, r1, r4}
  Lcd_cursor(&lcd, 0,1);
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <main+0x124>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	2100      	movs	r1, #0
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fea2 	bl	80007d0 <Lcd_cursor>
  Lcd_string(&lcd, "  WELCOME ");
 8000a8c:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <main+0x138>)
 8000a8e:	4b25      	ldr	r3, [pc, #148]	; (8000b24 <main+0x124>)
 8000a90:	0011      	movs	r1, r2
 8000a92:	0018      	movs	r0, r3
 8000a94:	f7ff fe72 	bl	800077c <Lcd_string>
  Lcd_cursor(&lcd, 1,1);
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <main+0x124>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff fe96 	bl	80007d0 <Lcd_cursor>
  Lcd_string(&lcd, "  ELECTRIFUEL ");
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <main+0x13c>)
 8000aa6:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <main+0x124>)
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f7ff fe66 	bl	800077c <Lcd_string>

	 long_delay(110);
 8000ab0:	206e      	movs	r0, #110	; 0x6e
 8000ab2:	f7ff fde7 	bl	8000684 <long_delay>
	 DPU_Average();
 8000ab6:	f7ff fca5 	bl	8000404 <DPU_Average>
	  HAL_TIM_Base_Start_IT(&htim2);
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <main+0x140>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fb41 	bl	8003144 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   TIM3->CCR4=duty;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <main+0x110>)
 8000ac4:	881a      	ldrh	r2, [r3, #0]
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <main+0x114>)
 8000ac8:	641a      	str	r2, [r3, #64]	; 0x40
	  // setdpuvoltage();
	   DpuVol=(FactorDpu*DPU_Vol_Count/1000);
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <main+0x10c>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	001a      	movs	r2, r3
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <main+0x144>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	4353      	muls	r3, r2
 8000ad6:	22fa      	movs	r2, #250	; 0xfa
 8000ad8:	0091      	lsls	r1, r2, #2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fba6 	bl	800022c <__divsi3>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	b29a      	uxth	r2, r3
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <main+0x148>)
 8000ae6:	801a      	strh	r2, [r3, #0]
	   EncoderAPI();
 8000ae8:	f000 fb88 	bl	80011fc <EncoderAPI>


	  if(duty > 480)
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <main+0x110>)
 8000aee:	881a      	ldrh	r2, [r3, #0]
 8000af0:	23f0      	movs	r3, #240	; 0xf0
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d9e4      	bls.n	8000ac2 <main+0xc2>
	  {
		  duty=480;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <main+0x110>)
 8000afa:	22f0      	movs	r2, #240	; 0xf0
 8000afc:	0052      	lsls	r2, r2, #1
 8000afe:	801a      	strh	r2, [r3, #0]
	   TIM3->CCR4=duty;
 8000b00:	e7df      	b.n	8000ac2 <main+0xc2>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	1ffff7ba 	.word	0x1ffff7ba
 8000b08:	2000005c 	.word	0x2000005c
 8000b0c:	20000046 	.word	0x20000046
 8000b10:	20000002 	.word	0x20000002
 8000b14:	40000400 	.word	0x40000400
 8000b18:	2000004c 	.word	0x2000004c
 8000b1c:	20000084 	.word	0x20000084
 8000b20:	20000150 	.word	0x20000150
 8000b24:	2000006c 	.word	0x2000006c
 8000b28:	48000800 	.word	0x48000800
 8000b2c:	20000014 	.word	0x20000014
 8000b30:	20000004 	.word	0x20000004
 8000b34:	48000400 	.word	0x48000400
 8000b38:	08004168 	.word	0x08004168
 8000b3c:	08004174 	.word	0x08004174
 8000b40:	20000108 	.word	0x20000108
 8000b44:	20000048 	.word	0x20000048
 8000b48:	20000044 	.word	0x20000044

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b093      	sub	sp, #76	; 0x4c
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	2414      	movs	r4, #20
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	0018      	movs	r0, r3
 8000b58:	2334      	movs	r3, #52	; 0x34
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f003 faef 	bl	8004140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	0018      	movs	r0, r3
 8000b66:	2310      	movs	r3, #16
 8000b68:	001a      	movs	r2, r3
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	f003 fae8 	bl	8004140 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48;
 8000b70:	0021      	movs	r1, r4
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2230      	movs	r2, #48	; 0x30
 8000b76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2201      	movs	r2, #1
 8000b82:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2210      	movs	r2, #16
 8000b88:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	0018      	movs	r0, r3
 8000b94:	f001 fda6 	bl	80026e4 <HAL_RCC_OscConfig>
 8000b98:	1e03      	subs	r3, r0, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000b9c:	f000 fbb2 	bl	8001304 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2207      	movs	r2, #7
 8000ba4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	2203      	movs	r2, #3
 8000baa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	1d3b      	adds	r3, r7, #4
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f002 f917 	bl	8002df0 <HAL_RCC_ClockConfig>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bc6:	f000 fb9d 	bl	8001304 <Error_Handler>
  }
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b013      	add	sp, #76	; 0x4c
 8000bd0:	bd90      	pop	{r4, r7, pc}
	...

08000bd4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	230c      	movs	r3, #12
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f003 faac 	bl	8004140 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000be8:	4b39      	ldr	r3, [pc, #228]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000bea:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <MX_ADC_Init+0x100>)
 8000bec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfa:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c00:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c06:	4b32      	ldr	r3, [pc, #200]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c12:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c26:	22c2      	movs	r2, #194	; 0xc2
 8000c28:	32ff      	adds	r2, #255	; 0xff
 8000c2a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c2c:	4b28      	ldr	r3, [pc, #160]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c34:	2224      	movs	r2, #36	; 0x24
 8000c36:	2101      	movs	r1, #1
 8000c38:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c3a:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c40:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fd36 	bl	80016b4 <HAL_ADC_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000c4c:	f000 fb5a 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	0152      	lsls	r2, r2, #5
 8000c5c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2203      	movs	r2, #3
 8000c62:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c64:	1d3a      	adds	r2, r7, #4
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c68:	0011      	movs	r1, r2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fefc 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000c70:	1e03      	subs	r3, r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000c74:	f000 fb46 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2210      	movs	r2, #16
 8000c7c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c7e:	1d3a      	adds	r2, r7, #4
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 feef 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000c8e:	f000 fb39 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2211      	movs	r2, #17
 8000c96:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c98:	1d3a      	adds	r2, r7, #4
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000c9c:	0011      	movs	r1, r2
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 fee2 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000ca8:	f000 fb2c 	bl	8001304 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2212      	movs	r2, #18
 8000cb0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cb2:	1d3a      	adds	r2, r7, #4
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_ADC_Init+0xfc>)
 8000cb6:	0011      	movs	r1, r2
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f000 fed5 	bl	8001a68 <HAL_ADC_ConfigChannel>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000cc2:	f000 fb1f 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	b004      	add	sp, #16
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	20000084 	.word	0x20000084
 8000cd4:	40012400 	.word	0x40012400

08000cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	2308      	movs	r3, #8
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f003 fa29 	bl	8004140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cee:	003b      	movs	r3, r7
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2308      	movs	r3, #8
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f003 fa22 	bl	8004140 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000cfe:	2280      	movs	r2, #128	; 0x80
 8000d00:	05d2      	lsls	r2, r2, #23
 8000d02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d06:	2230      	movs	r2, #48	; 0x30
 8000d08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d12:	22f4      	movs	r2, #244	; 0xf4
 8000d14:	32ff      	adds	r2, #255	; 0xff
 8000d16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f002 f9bc 	bl	80030a4 <HAL_TIM_Base_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d30:	f000 fae8 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	2108      	movs	r1, #8
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0152      	lsls	r2, r2, #5
 8000d3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	187a      	adds	r2, r7, r1
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fd3b 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d4e:	f000 fad9 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d5e:	003a      	movs	r2, r7
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_TIM2_Init+0xa4>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f003 f959 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d6e:	f000 fac9 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b006      	add	sp, #24
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000108 	.word	0x20000108

08000d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	2328      	movs	r3, #40	; 0x28
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2310      	movs	r3, #16
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f003 f9d5 	bl	8004140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	2320      	movs	r3, #32
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2308      	movs	r3, #8
 8000d9e:	001a      	movs	r2, r3
 8000da0:	2100      	movs	r1, #0
 8000da2:	f003 f9cd 	bl	8004140 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	0018      	movs	r0, r3
 8000daa:	231c      	movs	r3, #28
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f003 f9c6 	bl	8004140 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000db6:	4a31      	ldr	r2, [pc, #196]	; (8000e7c <MX_TIM3_Init+0xfc>)
 8000db8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000dba:	4b2f      	ldr	r3, [pc, #188]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 480-1;
 8000dc6:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000dc8:	22e0      	movs	r2, #224	; 0xe0
 8000dca:	32ff      	adds	r2, #255	; 0xff
 8000dcc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f002 f961 	bl	80030a4 <HAL_TIM_Base_Init>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000de6:	f000 fa8d 	bl	8001304 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dea:	2128      	movs	r1, #40	; 0x28
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	0152      	lsls	r2, r2, #5
 8000df2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df4:	187a      	adds	r2, r7, r1
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f002 fce0 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000e00:	1e03      	subs	r3, r0, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000e04:	f000 fa7e 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e08:	4b1b      	ldr	r3, [pc, #108]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 f9ec 	bl	80031e8 <HAL_TIM_PWM_Init>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e14:	f000 fa76 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e18:	2120      	movs	r1, #32
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e26:	187a      	adds	r2, r7, r1
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f003 f8f5 	bl	800401c <HAL_TIMEx_MasterConfigSynchronization>
 8000e32:	1e03      	subs	r3, r0, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000e36:	f000 fa65 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2260      	movs	r2, #96	; 0x60
 8000e3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e46:	1d3b      	adds	r3, r7, #4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e52:	1d39      	adds	r1, r7, #4
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f002 fbeb 	bl	8003634 <HAL_TIM_PWM_ConfigChannel>
 8000e5e:	1e03      	subs	r3, r0, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000e62:	f000 fa4f 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <MX_TIM3_Init+0xf8>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fb1f 	bl	80014ac <HAL_TIM_MspPostInit>

}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b00e      	add	sp, #56	; 0x38
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	20000150 	.word	0x20000150
 8000e7c:	40000400 	.word	0x40000400

08000e80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_DMA_Init+0x28>)
 8000e88:	695a      	ldr	r2, [r3, #20]
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <MX_DMA_Init+0x28>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	615a      	str	r2, [r3, #20]
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <MX_DMA_Init+0x28>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	2201      	movs	r2, #1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	240c      	movs	r4, #12
 8000eb4:	193b      	adds	r3, r7, r4
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2314      	movs	r3, #20
 8000eba:	001a      	movs	r2, r3
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f003 f93f 	bl	8004140 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <MX_GPIO_Init+0xcc>)
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_GPIO_Init+0xcc>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0309      	lsls	r1, r1, #12
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_GPIO_Init+0xcc>)
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	031b      	lsls	r3, r3, #12
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_GPIO_Init+0xcc>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MX_GPIO_Init+0xcc>)
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0289      	lsls	r1, r1, #10
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <MX_GPIO_Init+0xcc>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN_Pin|RS_Pin|D4_Pin|D5_Pin
 8000efa:	4920      	ldr	r1, [pc, #128]	; (8000f7c <MX_GPIO_Init+0xd0>)
 8000efc:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 fbd2 	bl	80026aa <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = EN_Pin|RS_Pin;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	22c0      	movs	r2, #192	; 0xc0
 8000f0a:	0212      	lsls	r2, r2, #8
 8000f0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	2201      	movs	r2, #1
 8000f12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	193b      	adds	r3, r7, r4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f24:	0019      	movs	r1, r3
 8000f26:	0010      	movs	r0, r2
 8000f28:	f001 fa2a 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8000f2c:	193b      	adds	r3, r7, r4
 8000f2e:	220f      	movs	r2, #15
 8000f30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2201      	movs	r2, #1
 8000f36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	193b      	adds	r3, r7, r4
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f44:	193b      	adds	r3, r7, r4
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f48:	0019      	movs	r1, r3
 8000f4a:	0010      	movs	r0, r2
 8000f4c:	f001 fa18 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : CCLK_ENCOD_Pin DT_ENCOD_Pin */
  GPIO_InitStruct.Pin = CCLK_ENCOD_Pin|DT_ENCOD_Pin;
 8000f50:	0021      	movs	r1, r4
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2230      	movs	r2, #48	; 0x30
 8000f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	f001 fa08 	bl	8002380 <HAL_GPIO_Init>

}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b009      	add	sp, #36	; 0x24
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	0000c00f 	.word	0x0000c00f
 8000f80:	48000800 	.word	0x48000800

08000f84 <Bitwise>:
/* USER CODE BEGIN 4 */



void Bitwise (void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	   DPU_Char_Vol[0]=(DpuVol/10000)+48;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <Bitwise+0xb4>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	492b      	ldr	r1, [pc, #172]	; (800103c <Bitwise+0xb8>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff f8c2 	bl	8000118 <__udivsi3>
 8000f94:	0003      	movs	r3, r0
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	3330      	adds	r3, #48	; 0x30
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4b28      	ldr	r3, [pc, #160]	; (8001040 <Bitwise+0xbc>)
 8000fa0:	701a      	strb	r2, [r3, #0]
	   DPU_Char_Vol[1]=(DpuVol%10000)/1000+48;
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <Bitwise+0xb4>)
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	4925      	ldr	r1, [pc, #148]	; (800103c <Bitwise+0xb8>)
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff f93b 	bl	8000224 <__aeabi_uidivmod>
 8000fae:	000b      	movs	r3, r1
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	22fa      	movs	r2, #250	; 0xfa
 8000fb4:	0091      	lsls	r1, r2, #2
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f8ae 	bl	8000118 <__udivsi3>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	3330      	adds	r3, #48	; 0x30
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <Bitwise+0xbc>)
 8000fc8:	705a      	strb	r2, [r3, #1]
	   DPU_Char_Vol[2]=(DpuVol%1000)/100+48;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <Bitwise+0xb4>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	22fa      	movs	r2, #250	; 0xfa
 8000fd0:	0091      	lsls	r1, r2, #2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff f926 	bl	8000224 <__aeabi_uidivmod>
 8000fd8:	000b      	movs	r3, r1
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	2164      	movs	r1, #100	; 0x64
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f7ff f89a 	bl	8000118 <__udivsi3>
 8000fe4:	0003      	movs	r3, r0
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	3330      	adds	r3, #48	; 0x30
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <Bitwise+0xbc>)
 8000ff0:	709a      	strb	r2, [r3, #2]
	   DPU_Char_Vol[3]=(DpuVol%100)/10+48;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <Bitwise+0xb4>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	2164      	movs	r1, #100	; 0x64
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f7ff f913 	bl	8000224 <__aeabi_uidivmod>
 8000ffe:	000b      	movs	r3, r1
 8001000:	b29b      	uxth	r3, r3
 8001002:	210a      	movs	r1, #10
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff f887 	bl	8000118 <__udivsi3>
 800100a:	0003      	movs	r3, r0
 800100c:	b29b      	uxth	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	3330      	adds	r3, #48	; 0x30
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <Bitwise+0xbc>)
 8001016:	70da      	strb	r2, [r3, #3]
	   DPU_Char_Vol[4]=(DpuVol%10)+48;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <Bitwise+0xb4>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	210a      	movs	r1, #10
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff f900 	bl	8000224 <__aeabi_uidivmod>
 8001024:	000b      	movs	r3, r1
 8001026:	b29b      	uxth	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	3330      	adds	r3, #48	; 0x30
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4b04      	ldr	r3, [pc, #16]	; (8001040 <Bitwise+0xbc>)
 8001030:	711a      	strb	r2, [r3, #4]
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000044 	.word	0x20000044
 800103c:	00002710 	.word	0x00002710
 8001040:	20000060 	.word	0x20000060

08001044 <DPU_Display>:
void DPU_Display(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	  Lcd_clear(&lcd);
 8001048:	4b5f      	ldr	r3, [pc, #380]	; (80011c8 <DPU_Display+0x184>)
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fbe2 	bl	8000814 <Lcd_clear>
 	if(DpuVol < 17000)
 8001050:	4b5e      	ldr	r3, [pc, #376]	; (80011cc <DPU_Display+0x188>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <DPU_Display+0x18c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d818      	bhi.n	800108c <DPU_Display+0x48>
	{
		  Lcd_cursor(&lcd, 0,1);
 800105a:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <DPU_Display+0x184>)
 800105c:	2201      	movs	r2, #1
 800105e:	2100      	movs	r1, #0
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fbb5 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, "  DPU OFF  ");
 8001066:	4a5b      	ldr	r2, [pc, #364]	; (80011d4 <DPU_Display+0x190>)
 8001068:	4b57      	ldr	r3, [pc, #348]	; (80011c8 <DPU_Display+0x184>)
 800106a:	0011      	movs	r1, r2
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fb85 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 1,1);
 8001072:	4b55      	ldr	r3, [pc, #340]	; (80011c8 <DPU_Display+0x184>)
 8001074:	2201      	movs	r2, #1
 8001076:	2101      	movs	r1, #1
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fba9 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, "   TURN ON DPU  ");
 800107e:	4a56      	ldr	r2, [pc, #344]	; (80011d8 <DPU_Display+0x194>)
 8001080:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <DPU_Display+0x184>)
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff fb79 	bl	800077c <Lcd_string>
 800108a:	e02f      	b.n	80010ec <DPU_Display+0xa8>
	}
	else
	{
		  Lcd_cursor(&lcd, 0,0);
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <DPU_Display+0x184>)
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fb9c 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, "SV:");
 8001098:	4a50      	ldr	r2, [pc, #320]	; (80011dc <DPU_Display+0x198>)
 800109a:	4b4b      	ldr	r3, [pc, #300]	; (80011c8 <DPU_Display+0x184>)
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff fb6c 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 1,0);
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <DPU_Display+0x184>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	2101      	movs	r1, #1
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fb90 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, "SI:");
 80010b0:	4a4b      	ldr	r2, [pc, #300]	; (80011e0 <DPU_Display+0x19c>)
 80010b2:	4b45      	ldr	r3, [pc, #276]	; (80011c8 <DPU_Display+0x184>)
 80010b4:	0011      	movs	r1, r2
 80010b6:	0018      	movs	r0, r3
 80010b8:	f7ff fb60 	bl	800077c <Lcd_string>

		  Lcd_cursor(&lcd, 0,7);
 80010bc:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <DPU_Display+0x184>)
 80010be:	2207      	movs	r2, #7
 80010c0:	2100      	movs	r1, #0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f7ff fb84 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, "DV:");
 80010c8:	4a46      	ldr	r2, [pc, #280]	; (80011e4 <DPU_Display+0x1a0>)
 80010ca:	4b3f      	ldr	r3, [pc, #252]	; (80011c8 <DPU_Display+0x184>)
 80010cc:	0011      	movs	r1, r2
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fb54 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 1,7);
 80010d4:	4b3c      	ldr	r3, [pc, #240]	; (80011c8 <DPU_Display+0x184>)
 80010d6:	2207      	movs	r2, #7
 80010d8:	2101      	movs	r1, #1
 80010da:	0018      	movs	r0, r3
 80010dc:	f7ff fb78 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, "DI:");
 80010e0:	4a41      	ldr	r2, [pc, #260]	; (80011e8 <DPU_Display+0x1a4>)
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <DPU_Display+0x184>)
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fb48 	bl	800077c <Lcd_string>
	}
	if(DpuVol < 26000)
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <DPU_Display+0x188>)
 80010ee:	881b      	ldrh	r3, [r3, #0]
 80010f0:	4a3e      	ldr	r2, [pc, #248]	; (80011ec <DPU_Display+0x1a8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d81e      	bhi.n	8001134 <DPU_Display+0xf0>
	{
		   DpuVol=DpuVol+0;
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <DPU_Display+0x188>)
 80010f8:	881a      	ldrh	r2, [r3, #0]
 80010fa:	4b34      	ldr	r3, [pc, #208]	; (80011cc <DPU_Display+0x188>)
 80010fc:	801a      	strh	r2, [r3, #0]

		  Lcd_cursor(&lcd, 0,10);
 80010fe:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <DPU_Display+0x184>)
 8001100:	220a      	movs	r2, #10
 8001102:	2100      	movs	r1, #0
 8001104:	0018      	movs	r0, r3
 8001106:	f7ff fb63 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, DPU_Char_Vol);
 800110a:	4a39      	ldr	r2, [pc, #228]	; (80011f0 <DPU_Display+0x1ac>)
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <DPU_Display+0x184>)
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fb33 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 1,10);
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <DPU_Display+0x184>)
 8001118:	220a      	movs	r2, #10
 800111a:	2101      	movs	r1, #1
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff fb57 	bl	80007d0 <Lcd_cursor>
		  Bitwise();
 8001122:	f7ff ff2f 	bl	8000f84 <Bitwise>
		  Lcd_string(&lcd, DPU_Char_Vol);
 8001126:	4a32      	ldr	r2, [pc, #200]	; (80011f0 <DPU_Display+0x1ac>)
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <DPU_Display+0x184>)
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fb25 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 0,10);
		  Lcd_string(&lcd, DPU_Char_Vol);
		  Lcd_cursor(&lcd, 1,10);
		  Lcd_string(&lcd, DPU_Char_Vol);
	}
}
 8001132:	e046      	b.n	80011c2 <DPU_Display+0x17e>
	else if(DpuVol < 42000)
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <DPU_Display+0x188>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	4a2e      	ldr	r2, [pc, #184]	; (80011f4 <DPU_Display+0x1b0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d81e      	bhi.n	800117c <DPU_Display+0x138>
		  DpuVol=DpuVol+0;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <DPU_Display+0x188>)
 8001140:	881a      	ldrh	r2, [r3, #0]
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <DPU_Display+0x188>)
 8001144:	801a      	strh	r2, [r3, #0]
		  Bitwise();
 8001146:	f7ff ff1d 	bl	8000f84 <Bitwise>
		  Lcd_cursor(&lcd, 0,10);
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <DPU_Display+0x184>)
 800114c:	220a      	movs	r2, #10
 800114e:	2100      	movs	r1, #0
 8001150:	0018      	movs	r0, r3
 8001152:	f7ff fb3d 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, DPU_Char_Vol);
 8001156:	4a26      	ldr	r2, [pc, #152]	; (80011f0 <DPU_Display+0x1ac>)
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <DPU_Display+0x184>)
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fb0d 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 1,10);
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <DPU_Display+0x184>)
 8001164:	220a      	movs	r2, #10
 8001166:	2101      	movs	r1, #1
 8001168:	0018      	movs	r0, r3
 800116a:	f7ff fb31 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, DPU_Char_Vol);
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <DPU_Display+0x1ac>)
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <DPU_Display+0x184>)
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff fb01 	bl	800077c <Lcd_string>
}
 800117a:	e022      	b.n	80011c2 <DPU_Display+0x17e>
	else if(DpuVol < 57000)
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <DPU_Display+0x188>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	4a1d      	ldr	r2, [pc, #116]	; (80011f8 <DPU_Display+0x1b4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d81d      	bhi.n	80011c2 <DPU_Display+0x17e>
		  DpuVol=DpuVol+0;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <DPU_Display+0x188>)
 8001188:	881a      	ldrh	r2, [r3, #0]
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <DPU_Display+0x188>)
 800118c:	801a      	strh	r2, [r3, #0]
		  Bitwise();
 800118e:	f7ff fef9 	bl	8000f84 <Bitwise>
		  Lcd_cursor(&lcd, 0,10);
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <DPU_Display+0x184>)
 8001194:	220a      	movs	r2, #10
 8001196:	2100      	movs	r1, #0
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fb19 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, DPU_Char_Vol);
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <DPU_Display+0x1ac>)
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <DPU_Display+0x184>)
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f7ff fae9 	bl	800077c <Lcd_string>
		  Lcd_cursor(&lcd, 1,10);
 80011aa:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <DPU_Display+0x184>)
 80011ac:	220a      	movs	r2, #10
 80011ae:	2101      	movs	r1, #1
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fb0d 	bl	80007d0 <Lcd_cursor>
		  Lcd_string(&lcd, DPU_Char_Vol);
 80011b6:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <DPU_Display+0x1ac>)
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <DPU_Display+0x184>)
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff fadd 	bl	800077c <Lcd_string>
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000006c 	.word	0x2000006c
 80011cc:	20000044 	.word	0x20000044
 80011d0:	00004267 	.word	0x00004267
 80011d4:	08004184 	.word	0x08004184
 80011d8:	08004190 	.word	0x08004190
 80011dc:	080041a4 	.word	0x080041a4
 80011e0:	080041a8 	.word	0x080041a8
 80011e4:	080041ac 	.word	0x080041ac
 80011e8:	080041b0 	.word	0x080041b0
 80011ec:	0000658f 	.word	0x0000658f
 80011f0:	20000060 	.word	0x20000060
 80011f4:	0000a40f 	.word	0x0000a40f
 80011f8:	0000dea7 	.word	0x0000dea7

080011fc <EncoderAPI>:


void EncoderAPI(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
 	if(HAL_GPIO_ReadPin(CCLK_ENCOD_GPIO_Port, CCLK_ENCOD_Pin)==GPIO_PIN_SET)
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <EncoderAPI+0xb8>)
 8001202:	2110      	movs	r1, #16
 8001204:	0018      	movs	r0, r3
 8001206:	f001 fa33 	bl	8002670 <HAL_GPIO_ReadPin>
 800120a:	0003      	movs	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d122      	bne.n	8001256 <EncoderAPI+0x5a>
	{
		if(HAL_GPIO_ReadPin(DT_ENCOD_GPIO_Port, DT_ENCOD_Pin)==GPIO_PIN_SET)
 8001210:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <EncoderAPI+0xb8>)
 8001212:	2120      	movs	r1, #32
 8001214:	0018      	movs	r0, r3
 8001216:	f001 fa2b 	bl	8002670 <HAL_GPIO_ReadPin>
 800121a:	0003      	movs	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d145      	bne.n	80012ac <EncoderAPI+0xb0>
		{
			while(HAL_GPIO_ReadPin(DT_ENCOD_GPIO_Port, DT_ENCOD_Pin)==GPIO_PIN_SET){};
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <EncoderAPI+0xb8>)
 8001224:	2120      	movs	r1, #32
 8001226:	0018      	movs	r0, r3
 8001228:	f001 fa22 	bl	8002670 <HAL_GPIO_ReadPin>
 800122c:	0003      	movs	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d0f7      	beq.n	8001222 <EncoderAPI+0x26>
 			 SetVolt=SetVolt-Encod_Counter;
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <EncoderAPI+0xbc>)
 8001234:	881a      	ldrh	r2, [r3, #0]
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <EncoderAPI+0xc0>)
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	b29a      	uxth	r2, r3
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <EncoderAPI+0xbc>)
 8001240:	801a      	strh	r2, [r3, #0]
 		    while(HAL_GPIO_ReadPin(CCLK_ENCOD_GPIO_Port, CCLK_ENCOD_Pin)==GPIO_PIN_SET){};
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <EncoderAPI+0xb8>)
 8001246:	2110      	movs	r1, #16
 8001248:	0018      	movs	r0, r3
 800124a:	f001 fa11 	bl	8002670 <HAL_GPIO_ReadPin>
 800124e:	0003      	movs	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d0f7      	beq.n	8001244 <EncoderAPI+0x48>

		}


	}
}
 8001254:	e02a      	b.n	80012ac <EncoderAPI+0xb0>
	else if(HAL_GPIO_ReadPin(DT_ENCOD_GPIO_Port, DT_ENCOD_Pin)==GPIO_PIN_SET)
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <EncoderAPI+0xb8>)
 8001258:	2120      	movs	r1, #32
 800125a:	0018      	movs	r0, r3
 800125c:	f001 fa08 	bl	8002670 <HAL_GPIO_ReadPin>
 8001260:	0003      	movs	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d122      	bne.n	80012ac <EncoderAPI+0xb0>
			while(HAL_GPIO_ReadPin(CCLK_ENCOD_GPIO_Port, CCLK_ENCOD_Pin)==GPIO_PIN_SET){};
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <EncoderAPI+0xb8>)
 800126a:	2110      	movs	r1, #16
 800126c:	0018      	movs	r0, r3
 800126e:	f001 f9ff 	bl	8002670 <HAL_GPIO_ReadPin>
 8001272:	0003      	movs	r3, r0
 8001274:	2b01      	cmp	r3, #1
 8001276:	d0f7      	beq.n	8001268 <EncoderAPI+0x6c>
			 SetVolt=SetVolt+Encod_Counter;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <EncoderAPI+0xbc>)
 800127a:	881a      	ldrh	r2, [r3, #0]
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <EncoderAPI+0xc0>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <EncoderAPI+0xbc>)
 8001286:	801a      	strh	r2, [r3, #0]
		    while(HAL_GPIO_ReadPin(DT_ENCOD_GPIO_Port, DT_ENCOD_Pin)==GPIO_PIN_SET){};
 8001288:	46c0      	nop			; (mov r8, r8)
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <EncoderAPI+0xb8>)
 800128c:	2120      	movs	r1, #32
 800128e:	0018      	movs	r0, r3
 8001290:	f001 f9ee 	bl	8002670 <HAL_GPIO_ReadPin>
 8001294:	0003      	movs	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d0f7      	beq.n	800128a <EncoderAPI+0x8e>
			while(HAL_GPIO_ReadPin(CCLK_ENCOD_GPIO_Port, CCLK_ENCOD_Pin)==GPIO_PIN_SET){};
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <EncoderAPI+0xb8>)
 800129e:	2110      	movs	r1, #16
 80012a0:	0018      	movs	r0, r3
 80012a2:	f001 f9e5 	bl	8002670 <HAL_GPIO_ReadPin>
 80012a6:	0003      	movs	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d0f7      	beq.n	800129c <EncoderAPI+0xa0>
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000068 	.word	0x20000068

080012c0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if(htim==&htim2)
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d110      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		DisplayCounter++;
 80012d0:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012da:	801a      	strh	r2, [r3, #0]
		 ControlVoltage();
 80012dc:	f7ff f8be 	bl	800045c <ControlVoltage>
		 if(DisplayCounter > 5)
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012e2:	881b      	ldrh	r3, [r3, #0]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d904      	bls.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x32>
		 {
			 DisplayCounter=0;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	801a      	strh	r2, [r3, #0]
			 DPU_Display();
 80012ee:	f7ff fea9 	bl	8001044 <DPU_Display>
		 }


	}

}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b002      	add	sp, #8
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	20000108 	.word	0x20000108
 8001300:	20000066 	.word	0x20000066

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001308:	b672      	cpsid	i
}
 800130a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800130c:	e7fe      	b.n	800130c <Error_Handler+0x8>
	...

08001310 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_MspInit+0x44>)
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <HAL_MspInit+0x44>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	619a      	str	r2, [r3, #24]
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_MspInit+0x44>)
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x44>)
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_MspInit+0x44>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0549      	lsls	r1, r1, #21
 8001338:	430a      	orrs	r2, r1
 800133a:	61da      	str	r2, [r3, #28]
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_MspInit+0x44>)
 800133e:	69da      	ldr	r2, [r3, #28]
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	055b      	lsls	r3, r3, #21
 8001344:	4013      	ands	r3, r2
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b002      	add	sp, #8
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08b      	sub	sp, #44	; 0x2c
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	2414      	movs	r4, #20
 8001362:	193b      	adds	r3, r7, r4
 8001364:	0018      	movs	r0, r3
 8001366:	2314      	movs	r3, #20
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f002 fee8 	bl	8004140 <memset>
  if(hadc->Instance==ADC1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2d      	ldr	r2, [pc, #180]	; (800142c <HAL_ADC_MspInit+0xd4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d153      	bne.n	8001422 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137a:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <HAL_ADC_MspInit+0xd8>)
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <HAL_ADC_MspInit+0xd8>)
 8001380:	2180      	movs	r1, #128	; 0x80
 8001382:	0089      	lsls	r1, r1, #2
 8001384:	430a      	orrs	r2, r1
 8001386:	619a      	str	r2, [r3, #24]
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <HAL_ADC_MspInit+0xd8>)
 800138a:	699a      	ldr	r2, [r3, #24]
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <HAL_ADC_MspInit+0xd8>)
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_ADC_MspInit+0xd8>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0289      	lsls	r1, r1, #10
 80013a0:	430a      	orrs	r2, r1
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_ADC_MspInit+0xd8>)
 80013a6:	695a      	ldr	r2, [r3, #20]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	193b      	adds	r3, r7, r4
 80013ba:	2203      	movs	r2, #3
 80013bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	193a      	adds	r2, r7, r4
 80013c6:	2390      	movs	r3, #144	; 0x90
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	0011      	movs	r1, r2
 80013cc:	0018      	movs	r0, r3
 80013ce:	f000 ffd7 	bl	8002380 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_ADC_MspInit+0xe0>)
 80013d6:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	0052      	lsls	r2, r2, #1
 80013f0:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 80013fc:	2220      	movs	r2, #32
 80013fe:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 8001408:	0018      	movs	r0, r3
 800140a:	f000 fe21 	bl	8002050 <HAL_DMA_Init>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001412:	f7ff ff77 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 800141a:	631a      	str	r2, [r3, #48]	; 0x30
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_ADC_MspInit+0xdc>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b00b      	add	sp, #44	; 0x2c
 8001428:	bd90      	pop	{r4, r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40012400 	.word	0x40012400
 8001430:	40021000 	.word	0x40021000
 8001434:	200000c4 	.word	0x200000c4
 8001438:	40020008 	.word	0x40020008

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	429a      	cmp	r2, r3
 800144e:	d114      	bne.n	800147a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_TIM_Base_MspInit+0x68>)
 8001452:	69da      	ldr	r2, [r3, #28]
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <HAL_TIM_Base_MspInit+0x68>)
 8001456:	2101      	movs	r1, #1
 8001458:	430a      	orrs	r2, r1
 800145a:	61da      	str	r2, [r3, #28]
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_TIM_Base_MspInit+0x68>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	2201      	movs	r2, #1
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	200f      	movs	r0, #15
 800146e:	f000 fdbd 	bl	8001fec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001472:	200f      	movs	r0, #15
 8001474:	f000 fdcf 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001478:	e010      	b.n	800149c <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM3)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_TIM_Base_MspInit+0x6c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d10b      	bne.n	800149c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <HAL_TIM_Base_MspInit+0x68>)
 8001486:	69da      	ldr	r2, [r3, #28]
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_TIM_Base_MspInit+0x68>)
 800148a:	2102      	movs	r1, #2
 800148c:	430a      	orrs	r2, r1
 800148e:	61da      	str	r2, [r3, #28]
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <HAL_TIM_Base_MspInit+0x68>)
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b004      	add	sp, #16
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40000400 	.word	0x40000400

080014ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	240c      	movs	r4, #12
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	0018      	movs	r0, r3
 80014ba:	2314      	movs	r3, #20
 80014bc:	001a      	movs	r2, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	f002 fe3e 	bl	8004140 <memset>
  if(htim->Instance==TIM3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a15      	ldr	r2, [pc, #84]	; (8001520 <HAL_TIM_MspPostInit+0x74>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d124      	bne.n	8001518 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <HAL_TIM_MspPostInit+0x78>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <HAL_TIM_MspPostInit+0x78>)
 80014d4:	2180      	movs	r1, #128	; 0x80
 80014d6:	0309      	lsls	r1, r1, #12
 80014d8:	430a      	orrs	r2, r1
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <HAL_TIM_MspPostInit+0x78>)
 80014de:	695a      	ldr	r2, [r3, #20]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	031b      	lsls	r3, r3, #12
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	0021      	movs	r1, r4
 80014f4:	187b      	adds	r3, r7, r1
 80014f6:	2202      	movs	r2, #2
 80014f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	2201      	movs	r2, #1
 80014fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	187b      	adds	r3, r7, r1
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150c:	187b      	adds	r3, r7, r1
 800150e:	4a06      	ldr	r2, [pc, #24]	; (8001528 <HAL_TIM_MspPostInit+0x7c>)
 8001510:	0019      	movs	r1, r3
 8001512:	0010      	movs	r0, r2
 8001514:	f000 ff34 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b009      	add	sp, #36	; 0x24
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	40000400 	.word	0x40000400
 8001524:	40021000 	.word	0x40021000
 8001528:	48000800 	.word	0x48000800

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 f894 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <DMA1_Channel1_IRQHandler+0x14>)
 8001562:	0018      	movs	r0, r3
 8001564:	f000 fe22 	bl	80021ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	200000c4 	.word	0x200000c4

08001574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <TIM2_IRQHandler+0x14>)
 800157a:	0018      	movs	r0, r3
 800157c:	f001 ff44 	bl	8003408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	20000108 	.word	0x20000108

0800158c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800159a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800159e:	490e      	ldr	r1, [pc, #56]	; (80015d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <LoopForever+0xe>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b4:	4c0b      	ldr	r4, [pc, #44]	; (80015e4 <LoopForever+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80015c2:	f7ff ffe3 	bl	800158c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80015c6:	f002 fd97 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ca:	f7ff fa19 	bl	8000a00 <main>

080015ce <LoopForever>:

LoopForever:
    b LoopForever
 80015ce:	e7fe      	b.n	80015ce <LoopForever>
  ldr   r0, =_estack
 80015d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80015dc:	080041f0 	.word	0x080041f0
  ldr r2, =_sbss
 80015e0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80015e4:	2000019c 	.word	0x2000019c

080015e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_COMP_IRQHandler>
	...

080015ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_Init+0x24>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_Init+0x24>)
 80015f6:	2110      	movs	r1, #16
 80015f8:	430a      	orrs	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f809 	bl	8001614 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001602:	f7ff fe85 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	40022000 	.word	0x40022000

08001614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_InitTick+0x5c>)
 800161e:	681c      	ldr	r4, [r3, #0]
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_InitTick+0x60>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	0019      	movs	r1, r3
 8001626:	23fa      	movs	r3, #250	; 0xfa
 8001628:	0098      	lsls	r0, r3, #2
 800162a:	f7fe fd75 	bl	8000118 <__udivsi3>
 800162e:	0003      	movs	r3, r0
 8001630:	0019      	movs	r1, r3
 8001632:	0020      	movs	r0, r4
 8001634:	f7fe fd70 	bl	8000118 <__udivsi3>
 8001638:	0003      	movs	r3, r0
 800163a:	0018      	movs	r0, r3
 800163c:	f000 fcfb 	bl	8002036 <HAL_SYSTICK_Config>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e00f      	b.n	8001668 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d80b      	bhi.n	8001666 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2301      	movs	r3, #1
 8001652:	425b      	negs	r3, r3
 8001654:	2200      	movs	r2, #0
 8001656:	0018      	movs	r0, r3
 8001658:	f000 fcc8 	bl	8001fec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_InitTick+0x64>)
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b003      	add	sp, #12
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	2000001c 	.word	0x2000001c
 8001674:	20000024 	.word	0x20000024
 8001678:	20000020 	.word	0x20000020

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x1c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	001a      	movs	r2, r3
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x20>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	18d2      	adds	r2, r2, r3
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_IncTick+0x20>)
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	20000024 	.word	0x20000024
 800169c:	20000198 	.word	0x20000198

080016a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <HAL_GetTick+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	0018      	movs	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	20000198 	.word	0x20000198

080016b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	230f      	movs	r3, #15
 80016be:	18fb      	adds	r3, r7, r3
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e125      	b.n	800191e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10a      	bne.n	80016f0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2234      	movs	r2, #52	; 0x34
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f7ff fe34 	bl	8001358 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	2210      	movs	r2, #16
 80016f6:	4013      	ands	r3, r2
 80016f8:	d000      	beq.n	80016fc <HAL_ADC_Init+0x48>
 80016fa:	e103      	b.n	8001904 <HAL_ADC_Init+0x250>
 80016fc:	230f      	movs	r3, #15
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d000      	beq.n	8001708 <HAL_ADC_Init+0x54>
 8001706:	e0fd      	b.n	8001904 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2204      	movs	r2, #4
 8001710:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001712:	d000      	beq.n	8001716 <HAL_ADC_Init+0x62>
 8001714:	e0f6      	b.n	8001904 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	4a83      	ldr	r2, [pc, #524]	; (8001928 <HAL_ADC_Init+0x274>)
 800171c:	4013      	ands	r3, r2
 800171e:	2202      	movs	r2, #2
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
 8001730:	2b01      	cmp	r3, #1
 8001732:	d112      	bne.n	800175a <HAL_ADC_Init+0xa6>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2201      	movs	r2, #1
 800173c:	4013      	ands	r3, r2
 800173e:	2b01      	cmp	r3, #1
 8001740:	d009      	beq.n	8001756 <HAL_ADC_Init+0xa2>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	2380      	movs	r3, #128	; 0x80
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	401a      	ands	r2, r3
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	429a      	cmp	r2, r3
 8001754:	d101      	bne.n	800175a <HAL_ADC_Init+0xa6>
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <HAL_ADC_Init+0xa8>
 800175a:	2300      	movs	r3, #0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d116      	bne.n	800178e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2218      	movs	r2, #24
 8001768:	4393      	bics	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	0899      	lsrs	r1, r3, #2
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4964      	ldr	r1, [pc, #400]	; (800192c <HAL_ADC_Init+0x278>)
 800179a:	400a      	ands	r2, r1
 800179c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7e1b      	ldrb	r3, [r3, #24]
 80017a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7e5b      	ldrb	r3, [r3, #25]
 80017a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	7e9b      	ldrb	r3, [r3, #26]
 80017b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80017b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d002      	beq.n	80017c2 <HAL_ADC_Init+0x10e>
 80017bc:	2380      	movs	r3, #128	; 0x80
 80017be:	015b      	lsls	r3, r3, #5
 80017c0:	e000      	b.n	80017c4 <HAL_ADC_Init+0x110>
 80017c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80017c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80017ca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_Init+0x124>
 80017d4:	2304      	movs	r3, #4
 80017d6:	e000      	b.n	80017da <HAL_ADC_Init+0x126>
 80017d8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80017da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2124      	movs	r1, #36	; 0x24
 80017e0:	5c5b      	ldrb	r3, [r3, r1]
 80017e2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80017e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7edb      	ldrb	r3, [r3, #27]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d115      	bne.n	8001820 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7e9b      	ldrb	r3, [r3, #26]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d105      	bne.n	8001808 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2280      	movs	r2, #128	; 0x80
 8001800:	0252      	lsls	r2, r2, #9
 8001802:	4313      	orrs	r3, r2
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	e00b      	b.n	8001820 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180c:	2220      	movs	r2, #32
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001818:	2201      	movs	r2, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69da      	ldr	r2, [r3, #28]
 8001824:	23c2      	movs	r3, #194	; 0xc2
 8001826:	33ff      	adds	r3, #255	; 0xff
 8001828:	429a      	cmp	r2, r3
 800182a:	d007      	beq.n	800183c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001834:	4313      	orrs	r3, r2
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	4313      	orrs	r3, r2
 800183a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68d9      	ldr	r1, [r3, #12]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	055b      	lsls	r3, r3, #21
 8001854:	429a      	cmp	r2, r3
 8001856:	d01b      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	2b01      	cmp	r3, #1
 800185e:	d017      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001864:	2b02      	cmp	r3, #2
 8001866:	d013      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	2b03      	cmp	r3, #3
 800186e:	d00f      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	2b04      	cmp	r3, #4
 8001876:	d00b      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	2b05      	cmp	r3, #5
 800187e:	d007      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	2b06      	cmp	r3, #6
 8001886:	d003      	beq.n	8001890 <HAL_ADC_Init+0x1dc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2b07      	cmp	r3, #7
 800188e:	d112      	bne.n	80018b6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2107      	movs	r1, #7
 800189c:	438a      	bics	r2, r1
 800189e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6959      	ldr	r1, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018aa:	2207      	movs	r2, #7
 80018ac:	401a      	ands	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4a1c      	ldr	r2, [pc, #112]	; (8001930 <HAL_ADC_Init+0x27c>)
 80018be:	4013      	ands	r3, r2
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d10b      	bne.n	80018de <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	2203      	movs	r2, #3
 80018d2:	4393      	bics	r3, r2
 80018d4:	2201      	movs	r2, #1
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80018dc:	e01c      	b.n	8001918 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e2:	2212      	movs	r2, #18
 80018e4:	4393      	bics	r3, r2
 80018e6:	2210      	movs	r2, #16
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018f2:	2201      	movs	r2, #1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80018fa:	230f      	movs	r3, #15
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001902:	e009      	b.n	8001918 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	2210      	movs	r2, #16
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001910:	230f      	movs	r3, #15
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001918:	230f      	movs	r3, #15
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b004      	add	sp, #16
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	fffffefd 	.word	0xfffffefd
 800192c:	fffe0219 	.word	0xfffe0219
 8001930:	833fffe7 	.word	0x833fffe7

08001934 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001934:	b590      	push	{r4, r7, lr}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001940:	2317      	movs	r3, #23
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2204      	movs	r2, #4
 8001950:	4013      	ands	r3, r2
 8001952:	d15e      	bne.n	8001a12 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2234      	movs	r2, #52	; 0x34
 8001958:	5c9b      	ldrb	r3, [r3, r2]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Start_DMA+0x2e>
 800195e:	2302      	movs	r3, #2
 8001960:	e05e      	b.n	8001a20 <HAL_ADC_Start_DMA+0xec>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2234      	movs	r2, #52	; 0x34
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	7e5b      	ldrb	r3, [r3, #25]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d007      	beq.n	8001982 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001972:	2317      	movs	r3, #23
 8001974:	18fc      	adds	r4, r7, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0018      	movs	r0, r3
 800197a:	f000 f983 	bl	8001c84 <ADC_Enable>
 800197e:	0003      	movs	r3, r0
 8001980:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d146      	bne.n	8001a1a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_ADC_Start_DMA+0xf4>)
 8001992:	4013      	ands	r3, r2
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0052      	lsls	r2, r2, #1
 8001998:	431a      	orrs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2234      	movs	r2, #52	; 0x34
 80019a8:	2100      	movs	r1, #0
 80019aa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_ADC_Start_DMA+0xf8>)
 80019b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4a1d      	ldr	r2, [pc, #116]	; (8001a30 <HAL_ADC_Start_DMA+0xfc>)
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4a1c      	ldr	r2, [pc, #112]	; (8001a34 <HAL_ADC_Start_DMA+0x100>)
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	221c      	movs	r2, #28
 80019ca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2110      	movs	r1, #16
 80019d8:	430a      	orrs	r2, r1
 80019da:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2101      	movs	r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	3340      	adds	r3, #64	; 0x40
 80019f6:	0019      	movs	r1, r3
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f000 fb70 	bl	80020e0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e003      	b.n	8001a1a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a12:	2317      	movs	r3, #23
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a1a:	2317      	movs	r3, #23
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b007      	add	sp, #28
 8001a26:	bd90      	pop	{r4, r7, pc}
 8001a28:	fffff0fe 	.word	0xfffff0fe
 8001a2c:	08001d8d 	.word	0x08001d8d
 8001a30:	08001e41 	.word	0x08001e41
 8001a34:	08001e5f 	.word	0x08001e5f

08001a38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a40:	46c0      	nop			; (mov r8, r8)
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a60:	46c0      	nop			; (mov r8, r8)
 8001a62:	46bd      	mov	sp, r7
 8001a64:	b002      	add	sp, #8
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a72:	230f      	movs	r3, #15
 8001a74:	18fb      	adds	r3, r7, r3
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	2380      	movs	r3, #128	; 0x80
 8001a84:	055b      	lsls	r3, r3, #21
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d011      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x46>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d00d      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x46>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d009      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x46>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	2b03      	cmp	r3, #3
 8001aa0:	d005      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x46>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d001      	beq.n	8001aae <HAL_ADC_ConfigChannel+0x46>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2234      	movs	r2, #52	; 0x34
 8001ab2:	5c9b      	ldrb	r3, [r3, r2]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x54>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e0d0      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x1f6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2234      	movs	r2, #52	; 0x34
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2204      	movs	r2, #4
 8001acc:	4013      	ands	r3, r2
 8001ace:	d000      	beq.n	8001ad2 <HAL_ADC_ConfigChannel+0x6a>
 8001ad0:	e0b4      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a64      	ldr	r2, [pc, #400]	; (8001c68 <HAL_ADC_ConfigChannel+0x200>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x76>
 8001adc:	e082      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	409a      	lsls	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d037      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d033      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d02f      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d02b      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d027      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d023      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d01f      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	d01b      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2107      	movs	r1, #7
 8001b44:	400b      	ands	r3, r1
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d012      	beq.n	8001b70 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2107      	movs	r1, #7
 8001b56:	438a      	bics	r2, r1
 8001b58:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6959      	ldr	r1, [r3, #20]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2207      	movs	r2, #7
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d007      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x120>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b11      	cmp	r3, #17
 8001b7e:	d003      	beq.n	8001b88 <HAL_ADC_ConfigChannel+0x120>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b12      	cmp	r3, #18
 8001b86:	d163      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <HAL_ADC_ConfigChannel+0x204>)
 8001b8a:	6819      	ldr	r1, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d009      	beq.n	8001ba8 <HAL_ADC_ConfigChannel+0x140>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b11      	cmp	r3, #17
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADC_ConfigChannel+0x13a>
 8001b9c:	2380      	movs	r3, #128	; 0x80
 8001b9e:	03db      	lsls	r3, r3, #15
 8001ba0:	e004      	b.n	8001bac <HAL_ADC_ConfigChannel+0x144>
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	045b      	lsls	r3, r3, #17
 8001ba6:	e001      	b.n	8001bac <HAL_ADC_ConfigChannel+0x144>
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	041b      	lsls	r3, r3, #16
 8001bac:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <HAL_ADC_ConfigChannel+0x204>)
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d14a      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bba:	4b2d      	ldr	r3, [pc, #180]	; (8001c70 <HAL_ADC_ConfigChannel+0x208>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	492d      	ldr	r1, [pc, #180]	; (8001c74 <HAL_ADC_ConfigChannel+0x20c>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7fe faa9 	bl	8000118 <__udivsi3>
 8001bc6:	0003      	movs	r3, r0
 8001bc8:	001a      	movs	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	189b      	adds	r3, r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bd4:	e002      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f9      	bne.n	8001bd6 <HAL_ADC_ConfigChannel+0x16e>
 8001be2:	e035      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	4099      	lsls	r1, r3
 8001bf2:	000b      	movs	r3, r1
 8001bf4:	43d9      	mvns	r1, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d007      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x1ae>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b11      	cmp	r3, #17
 8001c0c:	d003      	beq.n	8001c16 <HAL_ADC_ConfigChannel+0x1ae>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d11c      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_ADC_ConfigChannel+0x204>)
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_ConfigChannel+0x1ca>
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b11      	cmp	r3, #17
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x1c6>
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_ADC_ConfigChannel+0x210>)
 8001c2c:	e002      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1cc>
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_ADC_ConfigChannel+0x214>)
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_ConfigChannel+0x1cc>
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_ADC_ConfigChannel+0x218>)
 8001c34:	4a0d      	ldr	r2, [pc, #52]	; (8001c6c <HAL_ADC_ConfigChannel+0x204>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e009      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	2220      	movs	r2, #32
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001c48:	230f      	movs	r3, #15
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2234      	movs	r2, #52	; 0x34
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c58:	230f      	movs	r3, #15
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b004      	add	sp, #16
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	00001001 	.word	0x00001001
 8001c6c:	40012708 	.word	0x40012708
 8001c70:	2000001c 	.word	0x2000001c
 8001c74:	000f4240 	.word	0x000f4240
 8001c78:	ffbfffff 	.word	0xffbfffff
 8001c7c:	feffffff 	.word	0xfeffffff
 8001c80:	ff7fffff 	.word	0xff7fffff

08001c84 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d112      	bne.n	8001cc8 <ADC_Enable+0x44>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d009      	beq.n	8001cc4 <ADC_Enable+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68da      	ldr	r2, [r3, #12]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	401a      	ands	r2, r3
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d101      	bne.n	8001cc8 <ADC_Enable+0x44>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <ADC_Enable+0x46>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d152      	bne.n	8001d74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <ADC_Enable+0xfc>)
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d00d      	beq.n	8001cf6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	2210      	movs	r2, #16
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cea:	2201      	movs	r2, #1
 8001cec:	431a      	orrs	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e03f      	b.n	8001d76 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d06:	4b1f      	ldr	r3, [pc, #124]	; (8001d84 <ADC_Enable+0x100>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	491f      	ldr	r1, [pc, #124]	; (8001d88 <ADC_Enable+0x104>)
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7fe fa03 	bl	8000118 <__udivsi3>
 8001d12:	0003      	movs	r3, r0
 8001d14:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d16:	e002      	b.n	8001d1e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f9      	bne.n	8001d18 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d24:	f7ff fcbc 	bl	80016a0 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d2c:	e01b      	b.n	8001d66 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d2e:	f7ff fcb7 	bl	80016a0 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d914      	bls.n	8001d66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d00d      	beq.n	8001d66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	2210      	movs	r2, #16
 8001d50:	431a      	orrs	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e007      	b.n	8001d76 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d1dc      	bne.n	8001d2e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b004      	add	sp, #16
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	80000017 	.word	0x80000017
 8001d84:	2000001c 	.word	0x2000001c
 8001d88:	000f4240 	.word	0x000f4240

08001d8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9e:	2250      	movs	r2, #80	; 0x50
 8001da0:	4013      	ands	r3, r2
 8001da2:	d140      	bne.n	8001e26 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	23c0      	movs	r3, #192	; 0xc0
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d12d      	bne.n	8001e1c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d129      	bne.n	8001e1c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2208      	movs	r2, #8
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d122      	bne.n	8001e1c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2204      	movs	r2, #4
 8001dde:	4013      	ands	r3, r2
 8001de0:	d110      	bne.n	8001e04 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	210c      	movs	r1, #12
 8001dee:	438a      	bics	r2, r1
 8001df0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <ADC_DMAConvCplt+0xb0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
 8001e02:	e00b      	b.n	8001e1c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	2220      	movs	r2, #32
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e14:	2201      	movs	r2, #1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fe0a 	bl	8001a38 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001e24:	e005      	b.n	8001e32 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	0010      	movs	r0, r2
 8001e30:	4798      	blx	r3
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b004      	add	sp, #16
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	fffffefe 	.word	0xfffffefe

08001e40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fdf9 	bl	8001a48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b004      	add	sp, #16
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b084      	sub	sp, #16
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	431a      	orrs	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fde6 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	0002      	movs	r2, r0
 8001e9c:	1dfb      	adds	r3, r7, #7
 8001e9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ea6:	d809      	bhi.n	8001ebc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea8:	1dfb      	adds	r3, r7, #7
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	001a      	movs	r2, r3
 8001eae:	231f      	movs	r3, #31
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <__NVIC_EnableIRQ+0x30>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	4091      	lsls	r1, r2
 8001eb8:	000a      	movs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
  }
}
 8001ebc:	46c0      	nop			; (mov r8, r8)
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b002      	add	sp, #8
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	0002      	movs	r2, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	1dfb      	adds	r3, r7, #7
 8001ed4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b7f      	cmp	r3, #127	; 0x7f
 8001edc:	d828      	bhi.n	8001f30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ede:	4a2f      	ldr	r2, [pc, #188]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	33c0      	adds	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	589b      	ldr	r3, [r3, r2]
 8001eee:	1dfa      	adds	r2, r7, #7
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	400a      	ands	r2, r1
 8001ef8:	00d2      	lsls	r2, r2, #3
 8001efa:	21ff      	movs	r1, #255	; 0xff
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	2303      	movs	r3, #3
 8001f16:	4003      	ands	r3, r0
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f1c:	481f      	ldr	r0, [pc, #124]	; (8001f9c <__NVIC_SetPriority+0xd4>)
 8001f1e:	1dfb      	adds	r3, r7, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	430a      	orrs	r2, r1
 8001f28:	33c0      	adds	r3, #192	; 0xc0
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f2e:	e031      	b.n	8001f94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f30:	4a1b      	ldr	r2, [pc, #108]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f32:	1dfb      	adds	r3, r7, #7
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	0019      	movs	r1, r3
 8001f38:	230f      	movs	r3, #15
 8001f3a:	400b      	ands	r3, r1
 8001f3c:	3b08      	subs	r3, #8
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3306      	adds	r3, #6
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	18d3      	adds	r3, r2, r3
 8001f46:	3304      	adds	r3, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	1dfa      	adds	r2, r7, #7
 8001f4c:	7812      	ldrb	r2, [r2, #0]
 8001f4e:	0011      	movs	r1, r2
 8001f50:	2203      	movs	r2, #3
 8001f52:	400a      	ands	r2, r1
 8001f54:	00d2      	lsls	r2, r2, #3
 8001f56:	21ff      	movs	r1, #255	; 0xff
 8001f58:	4091      	lsls	r1, r2
 8001f5a:	000a      	movs	r2, r1
 8001f5c:	43d2      	mvns	r2, r2
 8001f5e:	401a      	ands	r2, r3
 8001f60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	22ff      	movs	r2, #255	; 0xff
 8001f68:	401a      	ands	r2, r3
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	2303      	movs	r3, #3
 8001f72:	4003      	ands	r3, r0
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <__NVIC_SetPriority+0xd8>)
 8001f7a:	1dfb      	adds	r3, r7, #7
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	001c      	movs	r4, r3
 8001f80:	230f      	movs	r3, #15
 8001f82:	4023      	ands	r3, r4
 8001f84:	3b08      	subs	r3, #8
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	3306      	adds	r3, #6
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	18c3      	adds	r3, r0, r3
 8001f90:	3304      	adds	r3, #4
 8001f92:	601a      	str	r2, [r3, #0]
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	b003      	add	sp, #12
 8001f9a:	bd90      	pop	{r4, r7, pc}
 8001f9c:	e000e100 	.word	0xe000e100
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1e5a      	subs	r2, r3, #1
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	045b      	lsls	r3, r3, #17
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d301      	bcc.n	8001fbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e010      	b.n	8001fde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <SysTick_Config+0x44>)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	3a01      	subs	r2, #1
 8001fc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2103      	movs	r1, #3
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fd6:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SysTick_Config+0x44>)
 8001fd8:	2207      	movs	r2, #7
 8001fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	0018      	movs	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			; (mov r8, r8)
 8001fe8:	e000e010 	.word	0xe000e010

08001fec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	210f      	movs	r1, #15
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	1c02      	adds	r2, r0, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b25b      	sxtb	r3, r3
 8002006:	0011      	movs	r1, r2
 8002008:	0018      	movs	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	0002      	movs	r2, r0
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	b25b      	sxtb	r3, r3
 8002028:	0018      	movs	r0, r3
 800202a:	f7ff ff33 	bl	8001e94 <__NVIC_EnableIRQ>
}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	46bd      	mov	sp, r7
 8002032:	b002      	add	sp, #8
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f7ff ffaf 	bl	8001fa4 <SysTick_Config>
 8002046:	0003      	movs	r3, r0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e036      	b.n	80020d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2221      	movs	r2, #33	; 0x21
 800206a:	2102      	movs	r1, #2
 800206c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a18      	ldr	r2, [pc, #96]	; (80020dc <HAL_DMA_Init+0x8c>)
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002086:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f946 	bl	8002348 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2221      	movs	r2, #33	; 0x21
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2220      	movs	r2, #32
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}  
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b004      	add	sp, #16
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	ffffc00f 	.word	0xffffc00f

080020e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2317      	movs	r3, #23
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_DMA_Start_IT+0x24>
 8002100:	2302      	movs	r3, #2
 8002102:	e04f      	b.n	80021a4 <HAL_DMA_Start_IT+0xc4>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	2101      	movs	r1, #1
 800210a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2221      	movs	r2, #33	; 0x21
 8002110:	5c9b      	ldrb	r3, [r3, r2]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	d13a      	bne.n	800218e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2221      	movs	r2, #33	; 0x21
 800211c:	2102      	movs	r1, #2
 800211e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	438a      	bics	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f8d7 	bl	80022f0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	210e      	movs	r1, #14
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00f      	b.n	800217c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	210a      	movs	r1, #10
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2104      	movs	r1, #4
 8002178:	438a      	bics	r2, r1
 800217a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2101      	movs	r1, #1
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002196:	2317      	movs	r3, #23
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2202      	movs	r2, #2
 800219c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 800219e:	2317      	movs	r3, #23
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	781b      	ldrb	r3, [r3, #0]
} 
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b006      	add	sp, #24
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	2204      	movs	r2, #4
 80021ca:	409a      	lsls	r2, r3
 80021cc:	0013      	movs	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	d024      	beq.n	800221e <HAL_DMA_IRQHandler+0x72>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2204      	movs	r2, #4
 80021d8:	4013      	ands	r3, r2
 80021da:	d020      	beq.n	800221e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2220      	movs	r2, #32
 80021e4:	4013      	ands	r3, r2
 80021e6:	d107      	bne.n	80021f8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2104      	movs	r1, #4
 80021f4:	438a      	bics	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	2104      	movs	r1, #4
 8002202:	4091      	lsls	r1, r2
 8002204:	000a      	movs	r2, r1
 8002206:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	2b00      	cmp	r3, #0
 800220e:	d100      	bne.n	8002212 <HAL_DMA_IRQHandler+0x66>
 8002210:	e06a      	b.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	0010      	movs	r0, r2
 800221a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800221c:	e064      	b.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	2202      	movs	r2, #2
 8002224:	409a      	lsls	r2, r3
 8002226:	0013      	movs	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4013      	ands	r3, r2
 800222c:	d02b      	beq.n	8002286 <HAL_DMA_IRQHandler+0xda>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	d027      	beq.n	8002286 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2220      	movs	r2, #32
 800223e:	4013      	ands	r3, r2
 8002240:	d10b      	bne.n	800225a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	210a      	movs	r1, #10
 800224e:	438a      	bics	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2221      	movs	r2, #33	; 0x21
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002262:	2102      	movs	r1, #2
 8002264:	4091      	lsls	r1, r2
 8002266:	000a      	movs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2220      	movs	r2, #32
 800226e:	2100      	movs	r1, #0
 8002270:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	2b00      	cmp	r3, #0
 8002278:	d036      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	0010      	movs	r0, r2
 8002282:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002284:	e030      	b.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2208      	movs	r2, #8
 800228c:	409a      	lsls	r2, r3
 800228e:	0013      	movs	r3, r2
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	4013      	ands	r3, r2
 8002294:	d028      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2208      	movs	r2, #8
 800229a:	4013      	ands	r3, r2
 800229c:	d024      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	210e      	movs	r1, #14
 80022aa:	438a      	bics	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	2101      	movs	r1, #1
 80022b8:	4091      	lsls	r1, r2
 80022ba:	000a      	movs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2221      	movs	r2, #33	; 0x21
 80022c8:	2101      	movs	r1, #1
 80022ca:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d005      	beq.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	0010      	movs	r0, r2
 80022e4:	4798      	blx	r3
    }
   }
}  
 80022e6:	e7ff      	b.n	80022e8 <HAL_DMA_IRQHandler+0x13c>
 80022e8:	46c0      	nop			; (mov r8, r8)
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b004      	add	sp, #16
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002306:	2101      	movs	r1, #1
 8002308:	4091      	lsls	r1, r2
 800230a:	000a      	movs	r2, r1
 800230c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b10      	cmp	r3, #16
 800231c:	d108      	bne.n	8002330 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800232e:	e007      	b.n	8002340 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b004      	add	sp, #16
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a08      	ldr	r2, [pc, #32]	; (8002378 <DMA_CalcBaseAndBitshift+0x30>)
 8002356:	4694      	mov	ip, r2
 8002358:	4463      	add	r3, ip
 800235a:	2114      	movs	r1, #20
 800235c:	0018      	movs	r0, r3
 800235e:	f7fd fedb 	bl	8000118 <__udivsi3>
 8002362:	0003      	movs	r3, r0
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a03      	ldr	r2, [pc, #12]	; (800237c <DMA_CalcBaseAndBitshift+0x34>)
 800236e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	b002      	add	sp, #8
 8002376:	bd80      	pop	{r7, pc}
 8002378:	bffdfff8 	.word	0xbffdfff8
 800237c:	40020000 	.word	0x40020000

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800238e:	e155      	b.n	800263c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2101      	movs	r1, #1
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4091      	lsls	r1, r2
 800239a:	000a      	movs	r2, r1
 800239c:	4013      	ands	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d100      	bne.n	80023a8 <HAL_GPIO_Init+0x28>
 80023a6:	e146      	b.n	8002636 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2203      	movs	r2, #3
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d005      	beq.n	80023c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2203      	movs	r2, #3
 80023ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d130      	bne.n	8002422 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	409a      	lsls	r2, r3
 80023ce:	0013      	movs	r3, r2
 80023d0:	43da      	mvns	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4013      	ands	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	409a      	lsls	r2, r3
 80023e2:	0013      	movs	r3, r2
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023f6:	2201      	movs	r2, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	43da      	mvns	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	2201      	movs	r2, #1
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
 8002414:	0013      	movs	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	4013      	ands	r3, r2
 800242a:	2b03      	cmp	r3, #3
 800242c:	d017      	beq.n	800245e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	43da      	mvns	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	409a      	lsls	r2, r3
 8002450:	0013      	movs	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	2b02      	cmp	r3, #2
 8002468:	d123      	bne.n	80024b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	58d3      	ldr	r3, [r2, r3]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2207      	movs	r2, #7
 800247c:	4013      	ands	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	220f      	movs	r2, #15
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	43da      	mvns	r2, r3
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2107      	movs	r1, #7
 8002496:	400b      	ands	r3, r1
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	409a      	lsls	r2, r3
 800249c:	0013      	movs	r3, r2
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	08da      	lsrs	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3208      	adds	r2, #8
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	6939      	ldr	r1, [r7, #16]
 80024b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	2203      	movs	r2, #3
 80024be:	409a      	lsls	r2, r3
 80024c0:	0013      	movs	r3, r2
 80024c2:	43da      	mvns	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4013      	ands	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	401a      	ands	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	409a      	lsls	r2, r3
 80024d8:	0013      	movs	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	029b      	lsls	r3, r3, #10
 80024ee:	4013      	ands	r3, r2
 80024f0:	d100      	bne.n	80024f4 <HAL_GPIO_Init+0x174>
 80024f2:	e0a0      	b.n	8002636 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f4:	4b57      	ldr	r3, [pc, #348]	; (8002654 <HAL_GPIO_Init+0x2d4>)
 80024f6:	699a      	ldr	r2, [r3, #24]
 80024f8:	4b56      	ldr	r3, [pc, #344]	; (8002654 <HAL_GPIO_Init+0x2d4>)
 80024fa:	2101      	movs	r1, #1
 80024fc:	430a      	orrs	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]
 8002500:	4b54      	ldr	r3, [pc, #336]	; (8002654 <HAL_GPIO_Init+0x2d4>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	2201      	movs	r2, #1
 8002506:	4013      	ands	r3, r2
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800250c:	4a52      	ldr	r2, [pc, #328]	; (8002658 <HAL_GPIO_Init+0x2d8>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	589b      	ldr	r3, [r3, r2]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2203      	movs	r2, #3
 800251e:	4013      	ands	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	409a      	lsls	r2, r3
 8002526:	0013      	movs	r3, r2
 8002528:	43da      	mvns	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	2390      	movs	r3, #144	; 0x90
 8002534:	05db      	lsls	r3, r3, #23
 8002536:	429a      	cmp	r2, r3
 8002538:	d019      	beq.n	800256e <HAL_GPIO_Init+0x1ee>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a47      	ldr	r2, [pc, #284]	; (800265c <HAL_GPIO_Init+0x2dc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d013      	beq.n	800256a <HAL_GPIO_Init+0x1ea>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_GPIO_Init+0x2e0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00d      	beq.n	8002566 <HAL_GPIO_Init+0x1e6>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a45      	ldr	r2, [pc, #276]	; (8002664 <HAL_GPIO_Init+0x2e4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d007      	beq.n	8002562 <HAL_GPIO_Init+0x1e2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a44      	ldr	r2, [pc, #272]	; (8002668 <HAL_GPIO_Init+0x2e8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d101      	bne.n	800255e <HAL_GPIO_Init+0x1de>
 800255a:	2304      	movs	r3, #4
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x1f0>
 800255e:	2305      	movs	r3, #5
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x1f0>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x1f0>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x1f0>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x1f0>
 800256e:	2300      	movs	r3, #0
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	2103      	movs	r1, #3
 8002574:	400a      	ands	r2, r1
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002580:	4935      	ldr	r1, [pc, #212]	; (8002658 <HAL_GPIO_Init+0x2d8>)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_GPIO_Init+0x2ec>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	025b      	lsls	r3, r3, #9
 80025a6:	4013      	ands	r3, r2
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025b2:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_GPIO_Init+0x2ec>)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <HAL_GPIO_Init+0x2ec>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	4013      	ands	r3, r2
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_GPIO_Init+0x2ec>)
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e2:	4b22      	ldr	r3, [pc, #136]	; (800266c <HAL_GPIO_Init+0x2ec>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	43da      	mvns	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	035b      	lsls	r3, r3, #13
 80025fa:	4013      	ands	r3, r2
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002606:	4b19      	ldr	r3, [pc, #100]	; (800266c <HAL_GPIO_Init+0x2ec>)
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800260c:	4b17      	ldr	r3, [pc, #92]	; (800266c <HAL_GPIO_Init+0x2ec>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43da      	mvns	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	039b      	lsls	r3, r3, #14
 8002624:	4013      	ands	r3, r2
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_GPIO_Init+0x2ec>)
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	40da      	lsrs	r2, r3
 8002644:	1e13      	subs	r3, r2, #0
 8002646:	d000      	beq.n	800264a <HAL_GPIO_Init+0x2ca>
 8002648:	e6a2      	b.n	8002390 <HAL_GPIO_Init+0x10>
  } 
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b006      	add	sp, #24
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	40010000 	.word	0x40010000
 800265c:	48000400 	.word	0x48000400
 8002660:	48000800 	.word	0x48000800
 8002664:	48000c00 	.word	0x48000c00
 8002668:	48001000 	.word	0x48001000
 800266c:	40010400 	.word	0x40010400

08002670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	000a      	movs	r2, r1
 800267a:	1cbb      	adds	r3, r7, #2
 800267c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	1cba      	adds	r2, r7, #2
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	4013      	ands	r3, r2
 8002688:	d004      	beq.n	8002694 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e003      	b.n	800269c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002694:	230f      	movs	r3, #15
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800269c:	230f      	movs	r3, #15
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	781b      	ldrb	r3, [r3, #0]
  }
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b004      	add	sp, #16
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	0008      	movs	r0, r1
 80026b4:	0011      	movs	r1, r2
 80026b6:	1cbb      	adds	r3, r7, #2
 80026b8:	1c02      	adds	r2, r0, #0
 80026ba:	801a      	strh	r2, [r3, #0]
 80026bc:	1c7b      	adds	r3, r7, #1
 80026be:	1c0a      	adds	r2, r1, #0
 80026c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026c2:	1c7b      	adds	r3, r7, #1
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ca:	1cbb      	adds	r3, r7, #2
 80026cc:	881a      	ldrh	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026d2:	e003      	b.n	80026dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026d4:	1cbb      	adds	r3, r7, #2
 80026d6:	881a      	ldrh	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026dc:	46c0      	nop			; (mov r8, r8)
 80026de:	46bd      	mov	sp, r7
 80026e0:	b002      	add	sp, #8
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f000 fb76 	bl	8002de4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2201      	movs	r2, #1
 80026fe:	4013      	ands	r3, r2
 8002700:	d100      	bne.n	8002704 <HAL_RCC_OscConfig+0x20>
 8002702:	e08e      	b.n	8002822 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002704:	4bc5      	ldr	r3, [pc, #788]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	220c      	movs	r2, #12
 800270a:	4013      	ands	r3, r2
 800270c:	2b04      	cmp	r3, #4
 800270e:	d00e      	beq.n	800272e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002710:	4bc2      	ldr	r3, [pc, #776]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	220c      	movs	r2, #12
 8002716:	4013      	ands	r3, r2
 8002718:	2b08      	cmp	r3, #8
 800271a:	d117      	bne.n	800274c <HAL_RCC_OscConfig+0x68>
 800271c:	4bbf      	ldr	r3, [pc, #764]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	23c0      	movs	r3, #192	; 0xc0
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	401a      	ands	r2, r3
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	025b      	lsls	r3, r3, #9
 800272a:	429a      	cmp	r2, r3
 800272c:	d10e      	bne.n	800274c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	4bbb      	ldr	r3, [pc, #748]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	029b      	lsls	r3, r3, #10
 8002736:	4013      	ands	r3, r2
 8002738:	d100      	bne.n	800273c <HAL_RCC_OscConfig+0x58>
 800273a:	e071      	b.n	8002820 <HAL_RCC_OscConfig+0x13c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d000      	beq.n	8002746 <HAL_RCC_OscConfig+0x62>
 8002744:	e06c      	b.n	8002820 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	f000 fb4c 	bl	8002de4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d107      	bne.n	8002764 <HAL_RCC_OscConfig+0x80>
 8002754:	4bb1      	ldr	r3, [pc, #708]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4bb0      	ldr	r3, [pc, #704]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0249      	lsls	r1, r1, #9
 800275e:	430a      	orrs	r2, r1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e02f      	b.n	80027c4 <HAL_RCC_OscConfig+0xe0>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d10c      	bne.n	8002786 <HAL_RCC_OscConfig+0xa2>
 800276c:	4bab      	ldr	r3, [pc, #684]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4baa      	ldr	r3, [pc, #680]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002772:	49ab      	ldr	r1, [pc, #684]	; (8002a20 <HAL_RCC_OscConfig+0x33c>)
 8002774:	400a      	ands	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4ba8      	ldr	r3, [pc, #672]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4ba7      	ldr	r3, [pc, #668]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800277e:	49a9      	ldr	r1, [pc, #676]	; (8002a24 <HAL_RCC_OscConfig+0x340>)
 8002780:	400a      	ands	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e01e      	b.n	80027c4 <HAL_RCC_OscConfig+0xe0>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10e      	bne.n	80027ac <HAL_RCC_OscConfig+0xc8>
 800278e:	4ba3      	ldr	r3, [pc, #652]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4ba2      	ldr	r3, [pc, #648]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002794:	2180      	movs	r1, #128	; 0x80
 8002796:	02c9      	lsls	r1, r1, #11
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	4b9f      	ldr	r3, [pc, #636]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4b9e      	ldr	r3, [pc, #632]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	0249      	lsls	r1, r1, #9
 80027a6:	430a      	orrs	r2, r1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0xe0>
 80027ac:	4b9b      	ldr	r3, [pc, #620]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b9a      	ldr	r3, [pc, #616]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80027b2:	499b      	ldr	r1, [pc, #620]	; (8002a20 <HAL_RCC_OscConfig+0x33c>)
 80027b4:	400a      	ands	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	4b98      	ldr	r3, [pc, #608]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b97      	ldr	r3, [pc, #604]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80027be:	4999      	ldr	r1, [pc, #612]	; (8002a24 <HAL_RCC_OscConfig+0x340>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d014      	beq.n	80027f6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe ff68 	bl	80016a0 <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d6:	f7fe ff63 	bl	80016a0 <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b64      	cmp	r3, #100	; 0x64
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e2fd      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027e8:	4b8c      	ldr	r3, [pc, #560]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0xf2>
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe ff53 	bl	80016a0 <HAL_GetTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe ff4e 	bl	80016a0 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e2e8      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b82      	ldr	r3, [pc, #520]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x11c>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d100      	bne.n	800282e <HAL_RCC_OscConfig+0x14a>
 800282c:	e06c      	b.n	8002908 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800282e:	4b7b      	ldr	r3, [pc, #492]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	220c      	movs	r2, #12
 8002834:	4013      	ands	r3, r2
 8002836:	d00e      	beq.n	8002856 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002838:	4b78      	ldr	r3, [pc, #480]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	220c      	movs	r2, #12
 800283e:	4013      	ands	r3, r2
 8002840:	2b08      	cmp	r3, #8
 8002842:	d11f      	bne.n	8002884 <HAL_RCC_OscConfig+0x1a0>
 8002844:	4b75      	ldr	r3, [pc, #468]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	23c0      	movs	r3, #192	; 0xc0
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	401a      	ands	r2, r3
 800284e:	2380      	movs	r3, #128	; 0x80
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	429a      	cmp	r2, r3
 8002854:	d116      	bne.n	8002884 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d005      	beq.n	800286c <HAL_RCC_OscConfig+0x188>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e2bb      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	22f8      	movs	r2, #248	; 0xf8
 8002872:	4393      	bics	r3, r2
 8002874:	0019      	movs	r1, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00da      	lsls	r2, r3, #3
 800287c:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800287e:	430a      	orrs	r2, r1
 8002880:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002882:	e041      	b.n	8002908 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d024      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800288c:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002892:	2101      	movs	r1, #1
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7fe ff02 	bl	80016a0 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a2:	f7fe fefd 	bl	80016a0 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e297      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	4b59      	ldr	r3, [pc, #356]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2202      	movs	r2, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d0f1      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b57      	ldr	r3, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	22f8      	movs	r2, #248	; 0xf8
 80028c4:	4393      	bics	r3, r2
 80028c6:	0019      	movs	r1, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	00da      	lsls	r2, r3, #3
 80028ce:	4b53      	ldr	r3, [pc, #332]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e018      	b.n	8002908 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b51      	ldr	r3, [pc, #324]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80028dc:	2101      	movs	r1, #1
 80028de:	438a      	bics	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fedd 	bl	80016a0 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fe fed8 	bl	80016a0 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e272      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b47      	ldr	r3, [pc, #284]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d1f1      	bne.n	80028ec <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2208      	movs	r2, #8
 800290e:	4013      	ands	r3, r2
 8002910:	d036      	beq.n	8002980 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d019      	beq.n	800294e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291a:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 800291c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800291e:	4b3f      	ldr	r3, [pc, #252]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002920:	2101      	movs	r1, #1
 8002922:	430a      	orrs	r2, r1
 8002924:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002926:	f7fe febb 	bl	80016a0 <HAL_GetTick>
 800292a:	0003      	movs	r3, r0
 800292c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe feb6 	bl	80016a0 <HAL_GetTick>
 8002934:	0002      	movs	r2, r0
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e250      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2202      	movs	r2, #2
 8002948:	4013      	ands	r3, r2
 800294a:	d0f1      	beq.n	8002930 <HAL_RCC_OscConfig+0x24c>
 800294c:	e018      	b.n	8002980 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294e:	4b33      	ldr	r3, [pc, #204]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002952:	4b32      	ldr	r3, [pc, #200]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002954:	2101      	movs	r1, #1
 8002956:	438a      	bics	r2, r1
 8002958:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7fe fea1 	bl	80016a0 <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fe9c 	bl	80016a0 <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e236      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002976:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	2202      	movs	r2, #2
 800297c:	4013      	ands	r3, r2
 800297e:	d1f1      	bne.n	8002964 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2204      	movs	r2, #4
 8002986:	4013      	ands	r3, r2
 8002988:	d100      	bne.n	800298c <HAL_RCC_OscConfig+0x2a8>
 800298a:	e0b5      	b.n	8002af8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298c:	201f      	movs	r0, #31
 800298e:	183b      	adds	r3, r7, r0
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002994:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002996:	69da      	ldr	r2, [r3, #28]
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	055b      	lsls	r3, r3, #21
 800299c:	4013      	ands	r3, r2
 800299e:	d110      	bne.n	80029c2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b1e      	ldr	r3, [pc, #120]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	4b1d      	ldr	r3, [pc, #116]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80029a6:	2180      	movs	r1, #128	; 0x80
 80029a8:	0549      	lsls	r1, r1, #21
 80029aa:	430a      	orrs	r2, r1
 80029ac:	61da      	str	r2, [r3, #28]
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 80029b0:	69da      	ldr	r2, [r3, #28]
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	055b      	lsls	r3, r3, #21
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80029bc:	183b      	adds	r3, r7, r0
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_RCC_OscConfig+0x344>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	d11a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCC_OscConfig+0x344>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_RCC_OscConfig+0x344>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0049      	lsls	r1, r1, #1
 80029d8:	430a      	orrs	r2, r1
 80029da:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029dc:	f7fe fe60 	bl	80016a0 <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7fe fe5b 	bl	80016a0 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	; 0x64
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e1f5      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_OscConfig+0x344>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	2380      	movs	r3, #128	; 0x80
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4013      	ands	r3, r2
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d10f      	bne.n	8002a2c <HAL_RCC_OscConfig+0x348>
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	4b02      	ldr	r3, [pc, #8]	; (8002a1c <HAL_RCC_OscConfig+0x338>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	430a      	orrs	r2, r1
 8002a16:	621a      	str	r2, [r3, #32]
 8002a18:	e036      	b.n	8002a88 <HAL_RCC_OscConfig+0x3a4>
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	fffeffff 	.word	0xfffeffff
 8002a24:	fffbffff 	.word	0xfffbffff
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x36a>
 8002a34:	4bca      	ldr	r3, [pc, #808]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	4bc9      	ldr	r3, [pc, #804]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	621a      	str	r2, [r3, #32]
 8002a40:	4bc7      	ldr	r3, [pc, #796]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a42:	6a1a      	ldr	r2, [r3, #32]
 8002a44:	4bc6      	ldr	r3, [pc, #792]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a46:	2104      	movs	r1, #4
 8002a48:	438a      	bics	r2, r1
 8002a4a:	621a      	str	r2, [r3, #32]
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x3a4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x38c>
 8002a56:	4bc2      	ldr	r3, [pc, #776]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a58:	6a1a      	ldr	r2, [r3, #32]
 8002a5a:	4bc1      	ldr	r3, [pc, #772]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	621a      	str	r2, [r3, #32]
 8002a62:	4bbf      	ldr	r3, [pc, #764]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	4bbe      	ldr	r3, [pc, #760]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a68:	2101      	movs	r1, #1
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	621a      	str	r2, [r3, #32]
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x3a4>
 8002a70:	4bbb      	ldr	r3, [pc, #748]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a72:	6a1a      	ldr	r2, [r3, #32]
 8002a74:	4bba      	ldr	r3, [pc, #744]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	438a      	bics	r2, r1
 8002a7a:	621a      	str	r2, [r3, #32]
 8002a7c:	4bb8      	ldr	r3, [pc, #736]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a7e:	6a1a      	ldr	r2, [r3, #32]
 8002a80:	4bb7      	ldr	r3, [pc, #732]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002a82:	2104      	movs	r1, #4
 8002a84:	438a      	bics	r2, r1
 8002a86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d014      	beq.n	8002aba <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a90:	f7fe fe06 	bl	80016a0 <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a98:	e009      	b.n	8002aae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a9a:	f7fe fe01 	bl	80016a0 <HAL_GetTick>
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	4aaf      	ldr	r2, [pc, #700]	; (8002d64 <HAL_RCC_OscConfig+0x680>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e19a      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	4bac      	ldr	r3, [pc, #688]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x3b6>
 8002ab8:	e013      	b.n	8002ae2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fdf1 	bl	80016a0 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	e009      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fdec 	bl	80016a0 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	4aa5      	ldr	r2, [pc, #660]	; (8002d64 <HAL_RCC_OscConfig+0x680>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e185      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad8:	4ba1      	ldr	r3, [pc, #644]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ae2:	231f      	movs	r3, #31
 8002ae4:	18fb      	adds	r3, r7, r3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b9c      	ldr	r3, [pc, #624]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	4b9b      	ldr	r3, [pc, #620]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002af2:	499d      	ldr	r1, [pc, #628]	; (8002d68 <HAL_RCC_OscConfig+0x684>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2210      	movs	r2, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d063      	beq.n	8002bca <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d12a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b0a:	4b95      	ldr	r3, [pc, #596]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0e:	4b94      	ldr	r3, [pc, #592]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b10:	2104      	movs	r1, #4
 8002b12:	430a      	orrs	r2, r1
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b16:	4b92      	ldr	r3, [pc, #584]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b1a:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe fdbd 	bl	80016a0 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b2c:	f7fe fdb8 	bl	80016a0 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e152      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b3e:	4b88      	ldr	r3, [pc, #544]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d0f1      	beq.n	8002b2c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b48:	4b85      	ldr	r3, [pc, #532]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	22f8      	movs	r2, #248	; 0xf8
 8002b4e:	4393      	bics	r3, r2
 8002b50:	0019      	movs	r1, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	00da      	lsls	r2, r3, #3
 8002b58:	4b81      	ldr	r3, [pc, #516]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b5e:	e034      	b.n	8002bca <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	3305      	adds	r3, #5
 8002b66:	d111      	bne.n	8002b8c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002b68:	4b7d      	ldr	r3, [pc, #500]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b6c:	4b7c      	ldr	r3, [pc, #496]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b6e:	2104      	movs	r1, #4
 8002b70:	438a      	bics	r2, r1
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b74:	4b7a      	ldr	r3, [pc, #488]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	22f8      	movs	r2, #248	; 0xf8
 8002b7a:	4393      	bics	r3, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	00da      	lsls	r2, r3, #3
 8002b84:	4b76      	ldr	r3, [pc, #472]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b86:	430a      	orrs	r2, r1
 8002b88:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8a:	e01e      	b.n	8002bca <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b8c:	4b74      	ldr	r3, [pc, #464]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b90:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b92:	2104      	movs	r1, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002b98:	4b71      	ldr	r3, [pc, #452]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9c:	4b70      	ldr	r3, [pc, #448]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fd7c 	bl	80016a0 <HAL_GetTick>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bae:	f7fe fd77 	bl	80016a0 <HAL_GetTick>
 8002bb2:	0002      	movs	r2, r0
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e111      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bc0:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d1f1      	bne.n	8002bae <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	d05c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002bd4:	4b62      	ldr	r3, [pc, #392]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	220c      	movs	r2, #12
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d00e      	beq.n	8002bfe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002be0:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	220c      	movs	r2, #12
 8002be6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d114      	bne.n	8002c16 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002bec:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	23c0      	movs	r3, #192	; 0xc0
 8002bf2:	025b      	lsls	r3, r3, #9
 8002bf4:	401a      	ands	r2, r3
 8002bf6:	23c0      	movs	r3, #192	; 0xc0
 8002bf8:	025b      	lsls	r3, r3, #9
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d10b      	bne.n	8002c16 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002bfe:	4b58      	ldr	r3, [pc, #352]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	025b      	lsls	r3, r3, #9
 8002c06:	4013      	ands	r3, r2
 8002c08:	d040      	beq.n	8002c8c <HAL_RCC_OscConfig+0x5a8>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d03c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0e6      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01b      	beq.n	8002c56 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002c1e:	4b50      	ldr	r3, [pc, #320]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0249      	lsls	r1, r1, #9
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7fe fd38 	bl	80016a0 <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c36:	f7fe fd33 	bl	80016a0 <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e0cd      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c48:	4b45      	ldr	r3, [pc, #276]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	025b      	lsls	r3, r3, #9
 8002c50:	4013      	ands	r3, r2
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x552>
 8002c54:	e01b      	b.n	8002c8e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002c56:	4b42      	ldr	r3, [pc, #264]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b41      	ldr	r3, [pc, #260]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c5c:	4943      	ldr	r1, [pc, #268]	; (8002d6c <HAL_RCC_OscConfig+0x688>)
 8002c5e:	400a      	ands	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fd1d 	bl	80016a0 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c6c:	f7fe fd18 	bl	80016a0 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b2      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002c7e:	4b38      	ldr	r3, [pc, #224]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	025b      	lsls	r3, r3, #9
 8002c86:	4013      	ands	r3, r2
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x588>
 8002c8a:	e000      	b.n	8002c8e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002c8c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d100      	bne.n	8002c98 <HAL_RCC_OscConfig+0x5b4>
 8002c96:	e0a4      	b.n	8002de2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	220c      	movs	r2, #12
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d100      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5c2>
 8002ca4:	e078      	b.n	8002d98 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d14c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cae:	4b2c      	ldr	r3, [pc, #176]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002cb4:	492e      	ldr	r1, [pc, #184]	; (8002d70 <HAL_RCC_OscConfig+0x68c>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fcf1 	bl	80016a0 <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fcec 	bl	80016a0 <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e086      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	049b      	lsls	r3, r3, #18
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	4393      	bics	r3, r2
 8002cea:	0019      	movs	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x690>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	0449      	lsls	r1, r1, #17
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fcbf 	bl	80016a0 <HAL_GetTick>
 8002d22:	0003      	movs	r3, r0
 8002d24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d28:	f7fe fcba 	bl	80016a0 <HAL_GetTick>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e054      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	049b      	lsls	r3, r3, #18
 8002d42:	4013      	ands	r3, r2
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x644>
 8002d46:	e04c      	b.n	8002de2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <HAL_RCC_OscConfig+0x67c>)
 8002d4e:	4908      	ldr	r1, [pc, #32]	; (8002d70 <HAL_RCC_OscConfig+0x68c>)
 8002d50:	400a      	ands	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fca4 	bl	80016a0 <HAL_GetTick>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d5c:	e015      	b.n	8002d8a <HAL_RCC_OscConfig+0x6a6>
 8002d5e:	46c0      	nop			; (mov r8, r8)
 8002d60:	40021000 	.word	0x40021000
 8002d64:	00001388 	.word	0x00001388
 8002d68:	efffffff 	.word	0xefffffff
 8002d6c:	fffeffff 	.word	0xfffeffff
 8002d70:	feffffff 	.word	0xfeffffff
 8002d74:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe fc92 	bl	80016a0 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e02c      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8a:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_RCC_OscConfig+0x708>)
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	049b      	lsls	r3, r3, #18
 8002d92:	4013      	ands	r3, r2
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x694>
 8002d96:	e024      	b.n	8002de2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e01f      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002da4:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_RCC_OscConfig+0x708>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_RCC_OscConfig+0x708>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	23c0      	movs	r3, #192	; 0xc0
 8002db4:	025b      	lsls	r3, r3, #9
 8002db6:	401a      	ands	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10e      	bne.n	8002dde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	220f      	movs	r2, #15
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	23f0      	movs	r3, #240	; 0xf0
 8002dd2:	039b      	lsls	r3, r3, #14
 8002dd4:	401a      	ands	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d001      	beq.n	8002de2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b008      	add	sp, #32
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0bf      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b61      	ldr	r3, [pc, #388]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d911      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b5e      	ldr	r3, [pc, #376]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	4393      	bics	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d001      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e0a6      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d015      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	d006      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e4a:	4b51      	ldr	r3, [pc, #324]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002e50:	21e0      	movs	r1, #224	; 0xe0
 8002e52:	00c9      	lsls	r1, r1, #3
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e58:	4b4d      	ldr	r3, [pc, #308]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	22f0      	movs	r2, #240	; 0xf0
 8002e5e:	4393      	bics	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	4b4a      	ldr	r3, [pc, #296]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2201      	movs	r2, #1
 8002e72:	4013      	ands	r3, r2
 8002e74:	d04c      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d107      	bne.n	8002e8e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b44      	ldr	r3, [pc, #272]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	029b      	lsls	r3, r3, #10
 8002e86:	4013      	ands	r3, r2
 8002e88:	d120      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e07a      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b3e      	ldr	r3, [pc, #248]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	049b      	lsls	r3, r3, #18
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d114      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e06e      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb2:	2380      	movs	r3, #128	; 0x80
 8002eb4:	025b      	lsls	r3, r3, #9
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d108      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e062      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b34      	ldr	r3, [pc, #208]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e05b      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ecc:	4b30      	ldr	r3, [pc, #192]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2203      	movs	r2, #3
 8002ed2:	4393      	bics	r3, r2
 8002ed4:	0019      	movs	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002edc:	430a      	orrs	r2, r1
 8002ede:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fbde 	bl	80016a0 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee8:	e009      	b.n	8002efe <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eea:	f7fe fbd9 	bl	80016a0 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_RCC_ClockConfig+0x1a4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e042      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	220c      	movs	r2, #12
 8002f04:	401a      	ands	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1ec      	bne.n	8002eea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	4013      	ands	r3, r2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d211      	bcs.n	8002f42 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4393      	bics	r3, r2
 8002f26:	0019      	movs	r1, r3
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x19c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2201      	movs	r2, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e020      	b.n	8002f84 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2204      	movs	r2, #4
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <HAL_RCC_ClockConfig+0x1a8>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f60:	f000 f820 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f64:	0001      	movs	r1, r0
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1a0>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	4013      	ands	r3, r2
 8002f70:	4a0a      	ldr	r2, [pc, #40]	; (8002f9c <HAL_RCC_ClockConfig+0x1ac>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	000a      	movs	r2, r1
 8002f76:	40da      	lsrs	r2, r3
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b0>)
 8002f7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f7fe fb49 	bl	8001614 <HAL_InitTick>
  
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b004      	add	sp, #16
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	00001388 	.word	0x00001388
 8002f98:	fffff8ff 	.word	0xfffff8ff
 8002f9c:	080041d8 	.word	0x080041d8
 8002fa0:	2000001c 	.word	0x2000001c

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b590      	push	{r4, r7, lr}
 8002fa6:	b08f      	sub	sp, #60	; 0x3c
 8002fa8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002faa:	2314      	movs	r3, #20
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	4a38      	ldr	r2, [pc, #224]	; (8003090 <HAL_RCC_GetSysClockFreq+0xec>)
 8002fb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fb2:	c313      	stmia	r3!, {r0, r1, r4}
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002fb8:	1d3b      	adds	r3, r7, #4
 8002fba:	4a36      	ldr	r2, [pc, #216]	; (8003094 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002fbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002fbe:	c313      	stmia	r3!, {r0, r1, r4}
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fcc:	2300      	movs	r3, #0
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe0:	220c      	movs	r2, #12
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b0c      	cmp	r3, #12
 8002fe6:	d047      	beq.n	8003078 <HAL_RCC_GetSysClockFreq+0xd4>
 8002fe8:	d849      	bhi.n	800307e <HAL_RCC_GetSysClockFreq+0xda>
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d002      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x50>
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d003      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x56>
 8002ff2:	e044      	b.n	800307e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ff4:	4b29      	ldr	r3, [pc, #164]	; (800309c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ff8:	e044      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffc:	0c9b      	lsrs	r3, r3, #18
 8002ffe:	220f      	movs	r2, #15
 8003000:	4013      	ands	r3, r2
 8003002:	2214      	movs	r2, #20
 8003004:	18ba      	adds	r2, r7, r2
 8003006:	5cd3      	ldrb	r3, [r2, r3]
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800300a:	4b23      	ldr	r3, [pc, #140]	; (8003098 <HAL_RCC_GetSysClockFreq+0xf4>)
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	220f      	movs	r2, #15
 8003010:	4013      	ands	r3, r2
 8003012:	1d3a      	adds	r2, r7, #4
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800301a:	23c0      	movs	r3, #192	; 0xc0
 800301c:	025b      	lsls	r3, r3, #9
 800301e:	401a      	ands	r2, r3
 8003020:	2380      	movs	r3, #128	; 0x80
 8003022:	025b      	lsls	r3, r3, #9
 8003024:	429a      	cmp	r2, r3
 8003026:	d109      	bne.n	800303c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800302a:	481c      	ldr	r0, [pc, #112]	; (800309c <HAL_RCC_GetSysClockFreq+0xf8>)
 800302c:	f7fd f874 	bl	8000118 <__udivsi3>
 8003030:	0003      	movs	r3, r0
 8003032:	001a      	movs	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	4353      	muls	r3, r2
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
 800303a:	e01a      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800303c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800303e:	23c0      	movs	r3, #192	; 0xc0
 8003040:	025b      	lsls	r3, r3, #9
 8003042:	401a      	ands	r2, r3
 8003044:	23c0      	movs	r3, #192	; 0xc0
 8003046:	025b      	lsls	r3, r3, #9
 8003048:	429a      	cmp	r2, r3
 800304a:	d109      	bne.n	8003060 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800304c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800304e:	4814      	ldr	r0, [pc, #80]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003050:	f7fd f862 	bl	8000118 <__udivsi3>
 8003054:	0003      	movs	r3, r0
 8003056:	001a      	movs	r2, r3
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	4353      	muls	r3, r2
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
 800305e:	e008      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003064:	f7fd f858 	bl	8000118 <__udivsi3>
 8003068:	0003      	movs	r3, r0
 800306a:	001a      	movs	r2, r3
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	4353      	muls	r3, r2
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003074:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003076:	e005      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003078:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800307e:	4b07      	ldr	r3, [pc, #28]	; (800309c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003080:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003082:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b00f      	add	sp, #60	; 0x3c
 800308c:	bd90      	pop	{r4, r7, pc}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	080041b4 	.word	0x080041b4
 8003094:	080041c4 	.word	0x080041c4
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	02dc6c00 	.word	0x02dc6c00

080030a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e042      	b.n	800313c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	223d      	movs	r2, #61	; 0x3d
 80030ba:	5c9b      	ldrb	r3, [r3, r2]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	223c      	movs	r2, #60	; 0x3c
 80030c6:	2100      	movs	r1, #0
 80030c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7fe f9b5 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	223d      	movs	r2, #61	; 0x3d
 80030d6:	2102      	movs	r1, #2
 80030d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3304      	adds	r3, #4
 80030e2:	0019      	movs	r1, r3
 80030e4:	0010      	movs	r0, r2
 80030e6:	f000 fc5f 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2246      	movs	r2, #70	; 0x46
 80030ee:	2101      	movs	r1, #1
 80030f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	223e      	movs	r2, #62	; 0x3e
 80030f6:	2101      	movs	r1, #1
 80030f8:	5499      	strb	r1, [r3, r2]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	223f      	movs	r2, #63	; 0x3f
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2240      	movs	r2, #64	; 0x40
 8003106:	2101      	movs	r1, #1
 8003108:	5499      	strb	r1, [r3, r2]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2241      	movs	r2, #65	; 0x41
 800310e:	2101      	movs	r1, #1
 8003110:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2242      	movs	r2, #66	; 0x42
 8003116:	2101      	movs	r1, #1
 8003118:	5499      	strb	r1, [r3, r2]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2243      	movs	r2, #67	; 0x43
 800311e:	2101      	movs	r1, #1
 8003120:	5499      	strb	r1, [r3, r2]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2244      	movs	r2, #68	; 0x44
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2245      	movs	r2, #69	; 0x45
 800312e:	2101      	movs	r1, #1
 8003130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	223d      	movs	r2, #61	; 0x3d
 8003136:	2101      	movs	r1, #1
 8003138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	223d      	movs	r2, #61	; 0x3d
 8003150:	5c9b      	ldrb	r3, [r3, r2]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	d001      	beq.n	800315c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e03b      	b.n	80031d4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223d      	movs	r2, #61	; 0x3d
 8003160:	2102      	movs	r1, #2
 8003162:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_TIM_Base_Start_IT+0x98>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00f      	beq.n	800319e <HAL_TIM_Base_Start_IT+0x5a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	05db      	lsls	r3, r3, #23
 8003186:	429a      	cmp	r2, r3
 8003188:	d009      	beq.n	800319e <HAL_TIM_Base_Start_IT+0x5a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIM_Base_Start_IT+0x5a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_TIM_Base_Start_IT+0xa0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2207      	movs	r2, #7
 80031a6:	4013      	ands	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d010      	beq.n	80031d2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2101      	movs	r1, #1
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c0:	e007      	b.n	80031d2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	430a      	orrs	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b004      	add	sp, #16
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40014000 	.word	0x40014000

080031e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e042      	b.n	8003280 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	223d      	movs	r2, #61	; 0x3d
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	223c      	movs	r2, #60	; 0x3c
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f000 f839 	bl	8003288 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223d      	movs	r2, #61	; 0x3d
 800321a:	2102      	movs	r1, #2
 800321c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3304      	adds	r3, #4
 8003226:	0019      	movs	r1, r3
 8003228:	0010      	movs	r0, r2
 800322a:	f000 fbbd 	bl	80039a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2246      	movs	r2, #70	; 0x46
 8003232:	2101      	movs	r1, #1
 8003234:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	223e      	movs	r2, #62	; 0x3e
 800323a:	2101      	movs	r1, #1
 800323c:	5499      	strb	r1, [r3, r2]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	223f      	movs	r2, #63	; 0x3f
 8003242:	2101      	movs	r1, #1
 8003244:	5499      	strb	r1, [r3, r2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2240      	movs	r2, #64	; 0x40
 800324a:	2101      	movs	r1, #1
 800324c:	5499      	strb	r1, [r3, r2]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2241      	movs	r2, #65	; 0x41
 8003252:	2101      	movs	r1, #1
 8003254:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2242      	movs	r2, #66	; 0x42
 800325a:	2101      	movs	r1, #1
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2243      	movs	r2, #67	; 0x43
 8003262:	2101      	movs	r1, #1
 8003264:	5499      	strb	r1, [r3, r2]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2244      	movs	r2, #68	; 0x44
 800326a:	2101      	movs	r1, #1
 800326c:	5499      	strb	r1, [r3, r2]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2245      	movs	r2, #69	; 0x45
 8003272:	2101      	movs	r1, #1
 8003274:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	223d      	movs	r2, #61	; 0x3d
 800327a:	2101      	movs	r1, #1
 800327c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003290:	46c0      	nop			; (mov r8, r8)
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d108      	bne.n	80032ba <HAL_TIM_PWM_Start+0x22>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	223e      	movs	r2, #62	; 0x3e
 80032ac:	5c9b      	ldrb	r3, [r3, r2]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	4193      	sbcs	r3, r2
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	e01f      	b.n	80032fa <HAL_TIM_PWM_Start+0x62>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d108      	bne.n	80032d2 <HAL_TIM_PWM_Start+0x3a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	223f      	movs	r2, #63	; 0x3f
 80032c4:	5c9b      	ldrb	r3, [r3, r2]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	1e5a      	subs	r2, r3, #1
 80032cc:	4193      	sbcs	r3, r2
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	e013      	b.n	80032fa <HAL_TIM_PWM_Start+0x62>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d108      	bne.n	80032ea <HAL_TIM_PWM_Start+0x52>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2240      	movs	r2, #64	; 0x40
 80032dc:	5c9b      	ldrb	r3, [r3, r2]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	4193      	sbcs	r3, r2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e007      	b.n	80032fa <HAL_TIM_PWM_Start+0x62>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2241      	movs	r2, #65	; 0x41
 80032ee:	5c9b      	ldrb	r3, [r3, r2]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	1e5a      	subs	r2, r3, #1
 80032f6:	4193      	sbcs	r3, r2
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e074      	b.n	80033ec <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_TIM_PWM_Start+0x7a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	223e      	movs	r2, #62	; 0x3e
 800330c:	2102      	movs	r1, #2
 800330e:	5499      	strb	r1, [r3, r2]
 8003310:	e013      	b.n	800333a <HAL_TIM_PWM_Start+0xa2>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d104      	bne.n	8003322 <HAL_TIM_PWM_Start+0x8a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	223f      	movs	r2, #63	; 0x3f
 800331c:	2102      	movs	r1, #2
 800331e:	5499      	strb	r1, [r3, r2]
 8003320:	e00b      	b.n	800333a <HAL_TIM_PWM_Start+0xa2>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d104      	bne.n	8003332 <HAL_TIM_PWM_Start+0x9a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	2102      	movs	r1, #2
 800332e:	5499      	strb	r1, [r3, r2]
 8003330:	e003      	b.n	800333a <HAL_TIM_PWM_Start+0xa2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2241      	movs	r2, #65	; 0x41
 8003336:	2102      	movs	r1, #2
 8003338:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6839      	ldr	r1, [r7, #0]
 8003340:	2201      	movs	r2, #1
 8003342:	0018      	movs	r0, r3
 8003344:	f000 fe46 	bl	8003fd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_TIM_PWM_Start+0x15c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_PWM_Start+0xd8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a28      	ldr	r2, [pc, #160]	; (80033f8 <HAL_TIM_PWM_Start+0x160>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_PWM_Start+0xd8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a26      	ldr	r2, [pc, #152]	; (80033fc <HAL_TIM_PWM_Start+0x164>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_PWM_Start+0xd8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a25      	ldr	r2, [pc, #148]	; (8003400 <HAL_TIM_PWM_Start+0x168>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_TIM_PWM_Start+0xdc>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_TIM_PWM_Start+0xde>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	0209      	lsls	r1, r1, #8
 8003388:	430a      	orrs	r2, r1
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_TIM_PWM_Start+0x15c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d00f      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x11e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	2380      	movs	r3, #128	; 0x80
 800339c:	05db      	lsls	r3, r3, #23
 800339e:	429a      	cmp	r2, r3
 80033a0:	d009      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x11e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a17      	ldr	r2, [pc, #92]	; (8003404 <HAL_TIM_PWM_Start+0x16c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x11e>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_TIM_PWM_Start+0x160>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2207      	movs	r2, #7
 80033be:	4013      	ands	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d010      	beq.n	80033ea <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2101      	movs	r1, #1
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	e007      	b.n	80033ea <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b004      	add	sp, #16
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40014000 	.word	0x40014000
 80033fc:	40014400 	.word	0x40014400
 8003400:	40014800 	.word	0x40014800
 8003404:	40000400 	.word	0x40000400

08003408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	2202      	movs	r2, #2
 8003418:	4013      	ands	r3, r2
 800341a:	2b02      	cmp	r3, #2
 800341c:	d124      	bne.n	8003468 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2202      	movs	r2, #2
 8003426:	4013      	ands	r3, r2
 8003428:	2b02      	cmp	r3, #2
 800342a:	d11d      	bne.n	8003468 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2203      	movs	r2, #3
 8003432:	4252      	negs	r2, r2
 8003434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	2203      	movs	r2, #3
 8003444:	4013      	ands	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	0018      	movs	r0, r3
 800344c:	f000 fa94 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 8003450:	e007      	b.n	8003462 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f000 fa87 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f000 fa93 	bl	8003988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	2204      	movs	r2, #4
 8003470:	4013      	ands	r3, r2
 8003472:	2b04      	cmp	r3, #4
 8003474:	d125      	bne.n	80034c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	2204      	movs	r2, #4
 800347e:	4013      	ands	r3, r2
 8003480:	2b04      	cmp	r3, #4
 8003482:	d11e      	bne.n	80034c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2205      	movs	r2, #5
 800348a:	4252      	negs	r2, r2
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699a      	ldr	r2, [r3, #24]
 800349a:	23c0      	movs	r3, #192	; 0xc0
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4013      	ands	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 fa67 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 80034aa:	e007      	b.n	80034bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 fa5a 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	0018      	movs	r0, r3
 80034b8:	f000 fa66 	bl	8003988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2208      	movs	r2, #8
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d124      	bne.n	800351a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2208      	movs	r2, #8
 80034d8:	4013      	ands	r3, r2
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d11d      	bne.n	800351a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2209      	movs	r2, #9
 80034e4:	4252      	negs	r2, r2
 80034e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2204      	movs	r2, #4
 80034ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	2203      	movs	r2, #3
 80034f6:	4013      	ands	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 fa3b 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 8003502:	e007      	b.n	8003514 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f000 fa2e 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 fa3a 	bl	8003988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	2210      	movs	r2, #16
 8003522:	4013      	ands	r3, r2
 8003524:	2b10      	cmp	r3, #16
 8003526:	d125      	bne.n	8003574 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	2210      	movs	r2, #16
 8003530:	4013      	ands	r3, r2
 8003532:	2b10      	cmp	r3, #16
 8003534:	d11e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2211      	movs	r2, #17
 800353c:	4252      	negs	r2, r2
 800353e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2208      	movs	r2, #8
 8003544:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	69da      	ldr	r2, [r3, #28]
 800354c:	23c0      	movs	r3, #192	; 0xc0
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	4013      	ands	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	0018      	movs	r0, r3
 8003558:	f000 fa0e 	bl	8003978 <HAL_TIM_IC_CaptureCallback>
 800355c:	e007      	b.n	800356e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 fa01 	bl	8003968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fa0d 	bl	8003988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10f      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	4013      	ands	r3, r2
 800358c:	2b01      	cmp	r3, #1
 800358e:	d108      	bne.n	80035a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2202      	movs	r2, #2
 8003596:	4252      	negs	r2, r2
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	0018      	movs	r0, r3
 800359e:	f7fd fe8f 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2280      	movs	r2, #128	; 0x80
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b80      	cmp	r3, #128	; 0x80
 80035ae:	d10f      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2280      	movs	r2, #128	; 0x80
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b80      	cmp	r3, #128	; 0x80
 80035bc:	d108      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2281      	movs	r2, #129	; 0x81
 80035c4:	4252      	negs	r2, r2
 80035c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	0018      	movs	r0, r3
 80035cc:	f000 fd8c 	bl	80040e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2240      	movs	r2, #64	; 0x40
 80035d8:	4013      	ands	r3, r2
 80035da:	2b40      	cmp	r3, #64	; 0x40
 80035dc:	d10f      	bne.n	80035fe <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b40      	cmp	r3, #64	; 0x40
 80035ea:	d108      	bne.n	80035fe <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2241      	movs	r2, #65	; 0x41
 80035f2:	4252      	negs	r2, r2
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	0018      	movs	r0, r3
 80035fa:	f000 f9cd 	bl	8003998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	2220      	movs	r2, #32
 8003606:	4013      	ands	r3, r2
 8003608:	2b20      	cmp	r3, #32
 800360a:	d10f      	bne.n	800362c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	4013      	ands	r3, r2
 8003616:	2b20      	cmp	r3, #32
 8003618:	d108      	bne.n	800362c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2221      	movs	r2, #33	; 0x21
 8003620:	4252      	negs	r2, r2
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	0018      	movs	r0, r3
 8003628:	f000 fd56 	bl	80040d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2317      	movs	r3, #23
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	223c      	movs	r2, #60	; 0x3c
 800364c:	5c9b      	ldrb	r3, [r3, r2]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003652:	2302      	movs	r3, #2
 8003654:	e0ad      	b.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	223c      	movs	r2, #60	; 0x3c
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d100      	bne.n	8003666 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003664:	e076      	b.n	8003754 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d900      	bls.n	800366e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800366c:	e095      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x166>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b08      	cmp	r3, #8
 8003672:	d04e      	beq.n	8003712 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b08      	cmp	r3, #8
 8003678:	d900      	bls.n	800367c <HAL_TIM_PWM_ConfigChannel+0x48>
 800367a:	e08e      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x166>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b04      	cmp	r3, #4
 8003686:	d021      	beq.n	80036cc <HAL_TIM_PWM_ConfigChannel+0x98>
 8003688:	e087      	b.n	800379a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	0011      	movs	r1, r2
 8003692:	0018      	movs	r0, r3
 8003694:	f000 fa08 	bl	8003aa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2108      	movs	r1, #8
 80036a4:	430a      	orrs	r2, r1
 80036a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2104      	movs	r1, #4
 80036b4:	438a      	bics	r2, r1
 80036b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6999      	ldr	r1, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	691a      	ldr	r2, [r3, #16]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	619a      	str	r2, [r3, #24]
      break;
 80036ca:	e06b      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	0011      	movs	r1, r2
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 fa6f 	bl	8003bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	0109      	lsls	r1, r1, #4
 80036e8:	430a      	orrs	r2, r1
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4931      	ldr	r1, [pc, #196]	; (80037bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 80036f8:	400a      	ands	r2, r1
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	021a      	lsls	r2, r3, #8
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]
      break;
 8003710:	e048      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	0011      	movs	r1, r2
 800371a:	0018      	movs	r0, r3
 800371c:	f000 fad0 	bl	8003cc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2108      	movs	r1, #8
 800372c:	430a      	orrs	r2, r1
 800372e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2104      	movs	r1, #4
 800373c:	438a      	bics	r2, r1
 800373e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69d9      	ldr	r1, [r3, #28]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	61da      	str	r2, [r3, #28]
      break;
 8003752:	e027      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	0011      	movs	r1, r2
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fb35 	bl	8003dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	0109      	lsls	r1, r1, #4
 8003770:	430a      	orrs	r2, r1
 8003772:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	490f      	ldr	r1, [pc, #60]	; (80037bc <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003780:	400a      	ands	r2, r1
 8003782:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	69d9      	ldr	r1, [r3, #28]
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	61da      	str	r2, [r3, #28]
      break;
 8003798:	e004      	b.n	80037a4 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800379a:	2317      	movs	r3, #23
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
      break;
 80037a2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	223c      	movs	r2, #60	; 0x3c
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]

  return status;
 80037ac:	2317      	movs	r3, #23
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b006      	add	sp, #24
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	fffffbff 	.word	0xfffffbff

080037c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	230f      	movs	r3, #15
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	223c      	movs	r2, #60	; 0x3c
 80037d6:	5c9b      	ldrb	r3, [r3, r2]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_TIM_ConfigClockSource+0x20>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0bc      	b.n	800395a <HAL_TIM_ConfigClockSource+0x19a>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	223c      	movs	r2, #60	; 0x3c
 80037e4:	2101      	movs	r1, #1
 80037e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	223d      	movs	r2, #61	; 0x3d
 80037ec:	2102      	movs	r1, #2
 80037ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2277      	movs	r2, #119	; 0x77
 80037fc:	4393      	bics	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003804:	4013      	ands	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2280      	movs	r2, #128	; 0x80
 8003816:	0192      	lsls	r2, r2, #6
 8003818:	4293      	cmp	r3, r2
 800381a:	d040      	beq.n	800389e <HAL_TIM_ConfigClockSource+0xde>
 800381c:	2280      	movs	r2, #128	; 0x80
 800381e:	0192      	lsls	r2, r2, #6
 8003820:	4293      	cmp	r3, r2
 8003822:	d900      	bls.n	8003826 <HAL_TIM_ConfigClockSource+0x66>
 8003824:	e088      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	0152      	lsls	r2, r2, #5
 800382a:	4293      	cmp	r3, r2
 800382c:	d100      	bne.n	8003830 <HAL_TIM_ConfigClockSource+0x70>
 800382e:	e088      	b.n	8003942 <HAL_TIM_ConfigClockSource+0x182>
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	0152      	lsls	r2, r2, #5
 8003834:	4293      	cmp	r3, r2
 8003836:	d900      	bls.n	800383a <HAL_TIM_ConfigClockSource+0x7a>
 8003838:	e07e      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 800383a:	2b70      	cmp	r3, #112	; 0x70
 800383c:	d018      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xb0>
 800383e:	d900      	bls.n	8003842 <HAL_TIM_ConfigClockSource+0x82>
 8003840:	e07a      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 8003842:	2b60      	cmp	r3, #96	; 0x60
 8003844:	d04f      	beq.n	80038e6 <HAL_TIM_ConfigClockSource+0x126>
 8003846:	d900      	bls.n	800384a <HAL_TIM_ConfigClockSource+0x8a>
 8003848:	e076      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 800384a:	2b50      	cmp	r3, #80	; 0x50
 800384c:	d03b      	beq.n	80038c6 <HAL_TIM_ConfigClockSource+0x106>
 800384e:	d900      	bls.n	8003852 <HAL_TIM_ConfigClockSource+0x92>
 8003850:	e072      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 8003852:	2b40      	cmp	r3, #64	; 0x40
 8003854:	d057      	beq.n	8003906 <HAL_TIM_ConfigClockSource+0x146>
 8003856:	d900      	bls.n	800385a <HAL_TIM_ConfigClockSource+0x9a>
 8003858:	e06e      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	d063      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x166>
 800385e:	d86b      	bhi.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d060      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x166>
 8003864:	d868      	bhi.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d05d      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x166>
 800386a:	2b10      	cmp	r3, #16
 800386c:	d05b      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0x166>
 800386e:	e063      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f000 fb88 	bl	8003f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2277      	movs	r2, #119	; 0x77
 8003890:	4313      	orrs	r3, r2
 8003892:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]
      break;
 800389c:	e052      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	6899      	ldr	r1, [r3, #8]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f000 fb71 	bl	8003f94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	01c9      	lsls	r1, r1, #7
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
      break;
 80038c4:	e03e      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	6859      	ldr	r1, [r3, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	001a      	movs	r2, r3
 80038d4:	f000 fae4 	bl	8003ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2150      	movs	r1, #80	; 0x50
 80038de:	0018      	movs	r0, r3
 80038e0:	f000 fb3e 	bl	8003f60 <TIM_ITRx_SetConfig>
      break;
 80038e4:	e02e      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	001a      	movs	r2, r3
 80038f4:	f000 fb02 	bl	8003efc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2160      	movs	r1, #96	; 0x60
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 fb2e 	bl	8003f60 <TIM_ITRx_SetConfig>
      break;
 8003904:	e01e      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	001a      	movs	r2, r3
 8003914:	f000 fac4 	bl	8003ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2140      	movs	r1, #64	; 0x40
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fb1e 	bl	8003f60 <TIM_ITRx_SetConfig>
      break;
 8003924:	e00e      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0019      	movs	r1, r3
 8003930:	0010      	movs	r0, r2
 8003932:	f000 fb15 	bl	8003f60 <TIM_ITRx_SetConfig>
      break;
 8003936:	e005      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003938:	230f      	movs	r3, #15
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
      break;
 8003940:	e000      	b.n	8003944 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003942:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	223d      	movs	r2, #61	; 0x3d
 8003948:	2101      	movs	r1, #1
 800394a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	223c      	movs	r2, #60	; 0x3c
 8003950:	2100      	movs	r1, #0
 8003952:	5499      	strb	r1, [r3, r2]

  return status;
 8003954:	230f      	movs	r3, #15
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	781b      	ldrb	r3, [r3, #0]
}
 800395a:	0018      	movs	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	b004      	add	sp, #16
 8003960:	bd80      	pop	{r7, pc}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	ffff00ff 	.word	0xffff00ff

08003968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b002      	add	sp, #8
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003980:	46c0      	nop			; (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039a0:	46c0      	nop			; (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a34      	ldr	r2, [pc, #208]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d008      	beq.n	80039d2 <TIM_Base_SetConfig+0x2a>
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	05db      	lsls	r3, r3, #23
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d003      	beq.n	80039d2 <TIM_Base_SetConfig+0x2a>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a30      	ldr	r2, [pc, #192]	; (8003a90 <TIM_Base_SetConfig+0xe8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d108      	bne.n	80039e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2270      	movs	r2, #112	; 0x70
 80039d6:	4393      	bics	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a29      	ldr	r2, [pc, #164]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <TIM_Base_SetConfig+0x76>
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	05db      	lsls	r3, r3, #23
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d013      	beq.n	8003a1e <TIM_Base_SetConfig+0x76>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a25      	ldr	r2, [pc, #148]	; (8003a90 <TIM_Base_SetConfig+0xe8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00f      	beq.n	8003a1e <TIM_Base_SetConfig+0x76>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <TIM_Base_SetConfig+0xec>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00b      	beq.n	8003a1e <TIM_Base_SetConfig+0x76>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <TIM_Base_SetConfig+0xf0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d007      	beq.n	8003a1e <TIM_Base_SetConfig+0x76>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <TIM_Base_SetConfig+0xf4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d003      	beq.n	8003a1e <TIM_Base_SetConfig+0x76>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <TIM_Base_SetConfig+0xf8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d108      	bne.n	8003a30 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <TIM_Base_SetConfig+0xfc>)
 8003a22:	4013      	ands	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2280      	movs	r2, #128	; 0x80
 8003a34:	4393      	bics	r3, r2
 8003a36:	001a      	movs	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <TIM_Base_SetConfig+0xe4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00b      	beq.n	8003a76 <TIM_Base_SetConfig+0xce>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <TIM_Base_SetConfig+0xf0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <TIM_Base_SetConfig+0xce>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <TIM_Base_SetConfig+0xf4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_Base_SetConfig+0xce>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a0b      	ldr	r2, [pc, #44]	; (8003aa0 <TIM_Base_SetConfig+0xf8>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d103      	bne.n	8003a7e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	691a      	ldr	r2, [r3, #16]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	615a      	str	r2, [r3, #20]
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40002000 	.word	0x40002000
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	fffffcff 	.word	0xfffffcff

08003aa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a1b      	ldr	r3, [r3, #32]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	4393      	bics	r3, r2
 8003aba:	001a      	movs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2270      	movs	r2, #112	; 0x70
 8003ad6:	4393      	bics	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2203      	movs	r2, #3
 8003ade:	4393      	bics	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2202      	movs	r2, #2
 8003af0:	4393      	bics	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a27      	ldr	r2, [pc, #156]	; (8003ba0 <TIM_OC1_SetConfig+0xf8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d00b      	beq.n	8003b1e <TIM_OC1_SetConfig+0x76>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a26      	ldr	r2, [pc, #152]	; (8003ba4 <TIM_OC1_SetConfig+0xfc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d007      	beq.n	8003b1e <TIM_OC1_SetConfig+0x76>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <TIM_OC1_SetConfig+0x100>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d003      	beq.n	8003b1e <TIM_OC1_SetConfig+0x76>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a24      	ldr	r2, [pc, #144]	; (8003bac <TIM_OC1_SetConfig+0x104>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10c      	bne.n	8003b38 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2208      	movs	r2, #8
 8003b22:	4393      	bics	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2204      	movs	r2, #4
 8003b34:	4393      	bics	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a19      	ldr	r2, [pc, #100]	; (8003ba0 <TIM_OC1_SetConfig+0xf8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <TIM_OC1_SetConfig+0xb0>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a18      	ldr	r2, [pc, #96]	; (8003ba4 <TIM_OC1_SetConfig+0xfc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d007      	beq.n	8003b58 <TIM_OC1_SetConfig+0xb0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <TIM_OC1_SetConfig+0x100>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d003      	beq.n	8003b58 <TIM_OC1_SetConfig+0xb0>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a16      	ldr	r2, [pc, #88]	; (8003bac <TIM_OC1_SetConfig+0x104>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d111      	bne.n	8003b7c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <TIM_OC1_SetConfig+0x108>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <TIM_OC1_SetConfig+0x10c>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	693a      	ldr	r2, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b006      	add	sp, #24
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800
 8003bb0:	fffffeff 	.word	0xfffffeff
 8003bb4:	fffffdff 	.word	0xfffffdff

08003bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	2210      	movs	r2, #16
 8003bc8:	4393      	bics	r3, r2
 8003bca:	001a      	movs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <TIM_OC2_SetConfig+0xe8>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <TIM_OC2_SetConfig+0xec>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	2220      	movs	r2, #32
 8003c02:	4393      	bics	r3, r2
 8003c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a24      	ldr	r2, [pc, #144]	; (8003ca8 <TIM_OC2_SetConfig+0xf0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d10d      	bne.n	8003c36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	4393      	bics	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	4393      	bics	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <TIM_OC2_SetConfig+0xf0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00b      	beq.n	8003c56 <TIM_OC2_SetConfig+0x9e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <TIM_OC2_SetConfig+0xf4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d007      	beq.n	8003c56 <TIM_OC2_SetConfig+0x9e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a19      	ldr	r2, [pc, #100]	; (8003cb0 <TIM_OC2_SetConfig+0xf8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d003      	beq.n	8003c56 <TIM_OC2_SetConfig+0x9e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <TIM_OC2_SetConfig+0xfc>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d113      	bne.n	8003c7e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <TIM_OC2_SetConfig+0x100>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <TIM_OC2_SetConfig+0x104>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	621a      	str	r2, [r3, #32]
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b006      	add	sp, #24
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	ffff8fff 	.word	0xffff8fff
 8003ca4:	fffffcff 	.word	0xfffffcff
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800
 8003cb8:	fffffbff 	.word	0xfffffbff
 8003cbc:	fffff7ff 	.word	0xfffff7ff

08003cc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4a35      	ldr	r2, [pc, #212]	; (8003da4 <TIM_OC3_SetConfig+0xe4>)
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2270      	movs	r2, #112	; 0x70
 8003cec:	4393      	bics	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	4393      	bics	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4a28      	ldr	r2, [pc, #160]	; (8003da8 <TIM_OC3_SetConfig+0xe8>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	021b      	lsls	r3, r3, #8
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a24      	ldr	r2, [pc, #144]	; (8003dac <TIM_OC3_SetConfig+0xec>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d10d      	bne.n	8003d3a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	4a23      	ldr	r2, [pc, #140]	; (8003db0 <TIM_OC3_SetConfig+0xf0>)
 8003d22:	4013      	ands	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <TIM_OC3_SetConfig+0xf4>)
 8003d36:	4013      	ands	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <TIM_OC3_SetConfig+0xec>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <TIM_OC3_SetConfig+0x9a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <TIM_OC3_SetConfig+0xf8>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <TIM_OC3_SetConfig+0x9a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <TIM_OC3_SetConfig+0xfc>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_OC3_SetConfig+0x9a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <TIM_OC3_SetConfig+0x100>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d113      	bne.n	8003d82 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <TIM_OC3_SetConfig+0x104>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4a18      	ldr	r2, [pc, #96]	; (8003dc8 <TIM_OC3_SetConfig+0x108>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	621a      	str	r2, [r3, #32]
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	b006      	add	sp, #24
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	fffffeff 	.word	0xfffffeff
 8003da8:	fffffdff 	.word	0xfffffdff
 8003dac:	40012c00 	.word	0x40012c00
 8003db0:	fffff7ff 	.word	0xfffff7ff
 8003db4:	fffffbff 	.word	0xfffffbff
 8003db8:	40014000 	.word	0x40014000
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	ffffefff 	.word	0xffffefff
 8003dc8:	ffffdfff 	.word	0xffffdfff

08003dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <TIM_OC4_SetConfig+0xb0>)
 8003ddc:	401a      	ands	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a22      	ldr	r2, [pc, #136]	; (8003e80 <TIM_OC4_SetConfig+0xb4>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a21      	ldr	r2, [pc, #132]	; (8003e84 <TIM_OC4_SetConfig+0xb8>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4a1d      	ldr	r2, [pc, #116]	; (8003e88 <TIM_OC4_SetConfig+0xbc>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	031b      	lsls	r3, r3, #12
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <TIM_OC4_SetConfig+0xc0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00b      	beq.n	8003e44 <TIM_OC4_SetConfig+0x78>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <TIM_OC4_SetConfig+0xc4>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d007      	beq.n	8003e44 <TIM_OC4_SetConfig+0x78>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <TIM_OC4_SetConfig+0xc8>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d003      	beq.n	8003e44 <TIM_OC4_SetConfig+0x78>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <TIM_OC4_SetConfig+0xcc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d109      	bne.n	8003e58 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <TIM_OC4_SetConfig+0xd0>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	019b      	lsls	r3, r3, #6
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	621a      	str	r2, [r3, #32]
}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b006      	add	sp, #24
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	ffffefff 	.word	0xffffefff
 8003e80:	ffff8fff 	.word	0xffff8fff
 8003e84:	fffffcff 	.word	0xfffffcff
 8003e88:	ffffdfff 	.word	0xffffdfff
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800
 8003e9c:	ffffbfff 	.word	0xffffbfff

08003ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	4393      	bics	r3, r2
 8003eba:	001a      	movs	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	22f0      	movs	r2, #240	; 0xf0
 8003eca:	4393      	bics	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	220a      	movs	r2, #10
 8003edc:	4393      	bics	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	621a      	str	r2, [r3, #32]
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b006      	add	sp, #24
 8003efa:	bd80      	pop	{r7, pc}

08003efc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	4393      	bics	r3, r2
 8003f10:	001a      	movs	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <TIM_TI2_ConfigInputStage+0x60>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	031b      	lsls	r3, r3, #12
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	22a0      	movs	r2, #160	; 0xa0
 8003f38:	4393      	bics	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	621a      	str	r2, [r3, #32]
}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	46bd      	mov	sp, r7
 8003f56:	b006      	add	sp, #24
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	46c0      	nop			; (mov r8, r8)
 8003f5c:	ffff0fff 	.word	0xffff0fff

08003f60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2270      	movs	r2, #112	; 0x70
 8003f74:	4393      	bics	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	2207      	movs	r2, #7
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	609a      	str	r2, [r3, #8]
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <TIM_ETR_SetConfig+0x3c>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	609a      	str	r2, [r3, #8]
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	b006      	add	sp, #24
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	ffff00ff 	.word	0xffff00ff

08003fd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	221f      	movs	r2, #31
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	0013      	movs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	43d2      	mvns	r2, r2
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	211f      	movs	r1, #31
 8004004:	400b      	ands	r3, r1
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4099      	lsls	r1, r3
 800400a:	000b      	movs	r3, r1
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	621a      	str	r2, [r3, #32]
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b006      	add	sp, #24
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	223c      	movs	r2, #60	; 0x3c
 800402a:	5c9b      	ldrb	r3, [r3, r2]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d101      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004030:	2302      	movs	r3, #2
 8004032:	e047      	b.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	223c      	movs	r2, #60	; 0x3c
 8004038:	2101      	movs	r1, #1
 800403a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	223d      	movs	r2, #61	; 0x3d
 8004040:	2102      	movs	r1, #2
 8004042:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2270      	movs	r2, #112	; 0x70
 8004058:	4393      	bics	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00f      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	05db      	lsls	r3, r3, #23
 8004080:	429a      	cmp	r2, r3
 8004082:	d009      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d10c      	bne.n	80040b2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2280      	movs	r2, #128	; 0x80
 800409c:	4393      	bics	r3, r2
 800409e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	223d      	movs	r2, #61	; 0x3d
 80040b6:	2101      	movs	r1, #1
 80040b8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	223c      	movs	r2, #60	; 0x3c
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	0018      	movs	r0, r3
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b004      	add	sp, #16
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40014000 	.word	0x40014000

080040d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	2600      	movs	r6, #0
 80040fc:	4d0c      	ldr	r5, [pc, #48]	; (8004130 <__libc_init_array+0x38>)
 80040fe:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 8004100:	1b64      	subs	r4, r4, r5
 8004102:	10a4      	asrs	r4, r4, #2
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	2600      	movs	r6, #0
 800410a:	f000 f821 	bl	8004150 <_init>
 800410e:	4d0a      	ldr	r5, [pc, #40]	; (8004138 <__libc_init_array+0x40>)
 8004110:	4c0a      	ldr	r4, [pc, #40]	; (800413c <__libc_init_array+0x44>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	00b3      	lsls	r3, r6, #2
 800411e:	58eb      	ldr	r3, [r5, r3]
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	00b3      	lsls	r3, r6, #2
 8004128:	58eb      	ldr	r3, [r5, r3]
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	080041e8 	.word	0x080041e8
 8004134:	080041e8 	.word	0x080041e8
 8004138:	080041e8 	.word	0x080041e8
 800413c:	080041ec 	.word	0x080041ec

08004140 <memset>:
 8004140:	0003      	movs	r3, r0
 8004142:	1882      	adds	r2, r0, r2
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	7019      	strb	r1, [r3, #0]
 800414c:	3301      	adds	r3, #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <_init>:
 8004150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004156:	bc08      	pop	{r3}
 8004158:	469e      	mov	lr, r3
 800415a:	4770      	bx	lr

0800415c <_fini>:
 800415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004162:	bc08      	pop	{r3}
 8004164:	469e      	mov	lr, r3
 8004166:	4770      	bx	lr
